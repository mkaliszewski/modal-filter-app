{"version":3,"sources":["components/navigation/toggle-button/toggle-button.component.jsx","components/shared/backdrop/backdrop.component.jsx","mock-data/mock.data.js","components/shared/icon/icon.component.jsx","components/navigation/navbar/navbar.component.jsx","components/navigation/navigation.component.jsx","components/shared/buttons/primary-button/primary-button.component.jsx","components/main/inputs/text-input/text-input.component.jsx","components/main/table/table-row/table-row-head/table-row-head.component.jsx","components/main/helpers.js","components/main/table/table-row/table-row-body/table-row-body.component.jsx","components/main/table/table.component.jsx","components/main/inputs/checkbox/checkbox.component.jsx","components/main/inputs/multiselect-dropdown/multiselect-dropdown.component.jsx","components/main/modal/modal-multiselect/modal-multiselect.component.jsx","components/main/inputs/date-picker/helpers.js","components/main/inputs/date-picker/date-picker.context.js","components/main/inputs/date-picker/date-picker-day/date-picker-day.component.jsx","components/main/inputs/date-picker/date-picker-month/date-picker-month.component.jsx","components/main/inputs/date-picker/date-picker-nav/date-picker-nav.component.jsx","components/main/inputs/date-picker/date-picker-handler/date-picker-handler.component.jsx","components/main/inputs/date-picker/date-picker.component.jsx","components/main/modal/modal-date/modal-date.component.jsx","components/shared/buttons/secondary-button/secondary-button.component.jsx","components/main/modal/modal.component.jsx","components/main/filters-info/filters-info.component.jsx","components/main/main.component.jsx","App.jsx","index.js"],"names":["ToggleButton","openNavbar","onClick","className","type","role","tabIndex","Backdrop","closeFunction","children","data-testid","defaultProps","ICONS_NAMES","AGREEMENT_TYPES","PERNAMENT","PERIOD","TASK","AGREEMENT_OPTIONS","Object","values","JOB_TYPES","COOK","WAITER","CLEANER","HELP","SERVICE","JOB_OPTIONS","LOCATIONS","ARKADY","PASAZ","BIELANY","LOCATIONS_OPTIONS","EMPLOYEES_HEADERS","INITIAL_FILTERS","date","startDate","endDate","jobs","locations","agreements","employees","JOB_FILTERS","NAVIGATION_ICONS","ICON_NAME","TEXT","EMPLOYEES","id","name","Date","job","agreement","MULTISELECTABLE_OPTIONS","title","options","filterKey","Icon","iconName","customCSSClass","BOOK","CHART","PHONE","ENVELOPE","INFO","SEARCH","SORT","CALENDAR","NEXT","PREVIOUS","icon","faAddressBook","faChartBar","faPhoneSquareAlt","faEnvelope","faInfoCircle","faSearch","faSortDown","faCalendarAlt","faChevronCircleRight","faChevronCircleLeft","getIcon","Navbar","isNavbarOpen","undefined","map","key","Navigation","useState","setIsNavbarOpen","PrimaryButton","text","buttonFunction","TextInput","placeholder","isDropdown","handeNameSearchChange","handleKeyPress","onChange","onKeyPress","TableRowHead","data","heading","index","getWindowWidth","window","innerWidth","filterName","searchName","arr","filter","element","elementName","toLowerCase","includes","formatDateToString","fullDate","day","getDay","month","getMonth","year","getFullYear","formatStringsFromArr","Array","isArray","el","length","EMPLOYEE_PROPTYPES","PropTypes","shape","number","isRequired","string","instanceOf","arrayOf","TableRowBody","oneOfType","oneOf","Table","dataLength","employee","Checkbox","isChecked","event","preventDefault","htmlFor","MultiselectDropdown","selectOptions","filtredRecords","selectedOptions","setSelectedOptions","isEmployeesMultiselect","areFiltersEmpty","searchValue","setSearchValue","filtredOptions","setFiltredOptions","shouldFiltredOptionsBeCleared","useEffect","listHeight","listFixedHeight","ELEMENT_HEIGHT","dropdownHeight","filtredOptionsLength","areOptionsEqual","JSON","stringify","style","height","value","target","indexOf","isInArray","updatedOptions","splice","push","handleSingleOptionSelect","ModalMultiselect","handleModalRuleChange","isAnyModalOpen","updateFilterValues","isDropdownOpen","setIsDropdownOpen","isWindowWidthValid","windowWidth","setWindowWidth","handleWindowWithChange","addEventListener","removeEventListener","useWindowWidth","isSelectedOptionInFiltredRecords","every","val","shouldSelectedOptionsBeCleared","getOptionName","option","selectedOptionsLength","validateEmployees","firstOption","validWidthMultipleOptions","getInputValue","enPlMonths","January","February","March","April","May","June","July","August","September","October","November","December","createContext","focusedDate","isDateFocused","isDateSelected","isDateHovered","isDateBlocked","isFirstOrLastSelectedDate","onDateFocus","onDateHover","onDateSelect","COLORS","PickerDay","dayLabel","contextValues","useContext","DatepickerContext","useDay","isSelected","isSelectedStartOrEnd","getTrueColor","selectedFirstOrLastColor","normalColor","selectedColor","getColors","color","background","WEEK_DAYS_LABELS","PickerMonth","firstDayOfWeek","useMonth","days","monthLabel","label","splitedDate","split","convertedMonth","convertMonthLabelToPl","toString","PickerNavButton","PickerHandler","clickFunction","DatePicker","pickerState","focusedInput","handleDateChange","closeDropdown","clearDatePicker","useDatepicker","onDatesChange","activeMonths","goToPreviousMonthsByOneMonth","goToNextMonthsByOneMonth","currentMonth","currentYear","validateNavigation","fnc","Provider","INITIAL_PICKER_STATE","START_DATE","ModalDate","setPickerState","handleDropdownClose","formatDateToDMString","getDate","inputValue","canDropdownBeClosed","SecondaryButton","isDisabled","disabled","Modal","handleTableDisplay","isEmployeeSelected","modalCloseFunction","setIsAnyModalOpen","rule","FiltersInfo","searchFilters","isOpen","Main","isFiltersModalOpen","setIsFiltersModalOpen","isTableVisible","setIsTableVisible","isLoading","setIsLoading","isFiltersInfoOpen","setIsFiltersInfoOpen","nameSearchValue","setNameSearchValue","setSearchFilters","setFiltredRecords","tableData","setTableData","closeFiltersModal","displayTable","setTimeout","filters","some","loc","filterThroughFilters","basicFilters","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b58c2f16.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './toggle-button.styles.scss';\r\n\r\n/**\r\n * Component used to toggle navigation bar\r\n *\r\n * @param {function} openNavbar function called on button click used to open navbar\r\n *\r\n * @return  {FC} ToggleButton component\r\n *\r\n * @component\r\n * @example\r\n * const openNavbar = () => {}\r\n *\r\n * return (\r\n *    <ToggleButton openNavbar={openNavbar} />\r\n * )\r\n *\r\n */\r\n\r\nconst ToggleButton = ({ openNavbar }) => (\r\n    <div\r\n        onClick={openNavbar}\r\n        className=\"toggle-button\"\r\n        type=\"button\"\r\n        role=\"button\"\r\n        tabIndex={0}\r\n    >\r\n        <div className=\"toggle-button__line\" />\r\n        <div className=\"toggle-button__line\" />\r\n        <div className=\"toggle-button__line\" />\r\n    </div>\r\n);\r\n\r\nToggleButton.propTypes = {\r\n    openNavbar: PropTypes.func.isRequired,\r\n};\r\nexport default ToggleButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './backdrop.styles.scss';\r\n\r\n/**\r\n * Component used to display screen backdrop\r\n *\r\n * @param {function} closeFunction function called on backdrop click used to close backdrop\r\n * @param {string} children children which will be displayed inside backdrop\r\n *\r\n * @return  {FC} Backdrop component\r\n *\r\n * @component\r\n * @example\r\n * const closeFunction = () => {}\r\n * const children = 'Loading'\r\n *\r\n * return (\r\n *    <Backdrop closeFunction={closeFunction}>\r\n *      children\r\n *    </Backdrop>\r\n * )\r\n *\r\n */\r\n\r\nconst Backdrop = ({ closeFunction, children }) => (\r\n    <div className=\"backdrop\" onClick={closeFunction} data-testid=\"backdrop\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nBackdrop.propTypes = {\r\n    closeFunction: PropTypes.func,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.arrayOf(PropTypes.string),\r\n    ]),\r\n};\r\n\r\nBackdrop.defaultProps = {\r\n    closeFunction: () => {},\r\n    children: '',\r\n};\r\n\r\nexport default Backdrop;\r\n","export const ICONS_NAMES = {\r\n    BOOK: 'book',\r\n    CHART: 'chart',\r\n    PHONE: 'phone',\r\n    ENVELOPE: 'envelope',\r\n    INFO: 'info',\r\n    SEARCH: 'search',\r\n    SORT: 'sort',\r\n    CALENDAR: 'calendar',\r\n    NEXT: 'next',\r\n    PREVIOUS: 'previous',\r\n};\r\n\r\nexport const AGREEMENT_TYPES = {\r\n    PERNAMENT: 'Umowa o pracę',\r\n    PERIOD: 'Umowa zlecenie',\r\n    TASK: 'Umowa o dzieło',\r\n};\r\n\r\nexport const AGREEMENT_OPTIONS = Object.values(AGREEMENT_TYPES);\r\n\r\nexport const JOB_TYPES = {\r\n    COOK: 'Kucharz',\r\n    WAITER: 'Kelner',\r\n    CLEANER: 'Konserwator',\r\n    HELP: 'Pomoc kuchenna',\r\n    SERVICE: 'Serwisant',\r\n};\r\n\r\nexport const JOB_OPTIONS = Object.values(JOB_TYPES);\r\n\r\nexport const LOCATIONS = {\r\n    ARKADY: 'Arkady',\r\n    PASAZ: 'Pasaż Grunwaldzki',\r\n    BIELANY: 'Aleja Bielany',\r\n};\r\n\r\nexport const LOCATIONS_OPTIONS = Object.values(LOCATIONS);\r\n\r\nexport const EMPLOYEES_HEADERS = [\r\n    'Imię i nazwisko',\r\n    'Data',\r\n    'Stanowisko',\r\n    'Warunki zatrudnienia',\r\n    'Lokalizacje',\r\n];\r\n\r\nexport const INITIAL_FILTERS = {\r\n    date: {\r\n        startDate: null,\r\n        endDate: null,\r\n    },\r\n    jobs: [],\r\n    locations: [],\r\n    agreements: [],\r\n    employees: [],\r\n};\r\n\r\nexport const JOB_FILTERS = {\r\n    date: {\r\n        startDate: null,\r\n        endDate: null,\r\n    },\r\n    jobs: [],\r\n    locations: [],\r\n    agreements: [],\r\n};\r\n\r\nexport const NAVIGATION_ICONS = [\r\n    {\r\n        ICON_NAME: 'book',\r\n        TEXT: 'Pracownicy',\r\n    },\r\n    {\r\n        ICON_NAME: 'chart',\r\n        TEXT: 'Analiza',\r\n    },\r\n    {\r\n        ICON_NAME: 'phone',\r\n        TEXT: 'Kontakty',\r\n    },\r\n    {\r\n        ICON_NAME: 'envelope',\r\n        TEXT: 'Wiadomości',\r\n    },\r\n];\r\n\r\nexport const EMPLOYEES = [\r\n    {\r\n        id: 1,\r\n        name: 'Adam Adamski',\r\n        date: new Date(2020, 0, 1),\r\n        job: JOB_TYPES.COOK,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Bernadeta Bednarska',\r\n        date: new Date(2020, 1, 2),\r\n        job: JOB_TYPES.WAITER,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Cecylia Cedyńska',\r\n        date: new Date(2020, 2, 3),\r\n        job: JOB_TYPES.CLEANER,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Denis Dembski',\r\n        date: new Date(2020, 3, 4),\r\n        job: JOB_TYPES.HELP,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Ernest Etstkowski',\r\n        date: new Date(2020, 4, 5),\r\n        job: JOB_TYPES.SERVICE,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Franciszek Fretka',\r\n        date: new Date(2020, 5, 6),\r\n        job: JOB_TYPES.COOK,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Grażyna Gasiuk',\r\n        date: new Date(2020, 6, 7),\r\n        job: JOB_TYPES.WAITER,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Henryk Henrykowski',\r\n        date: new Date(2020, 7, 8),\r\n        job: JOB_TYPES.CLEANER,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Irena Isierska',\r\n        date: new Date(2020, 8, 9),\r\n        job: JOB_TYPES.HELP,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Jakub Jędrzychowski',\r\n        date: new Date(2020, 9, 10),\r\n        job: JOB_TYPES.SERVICE,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'Katarzyna Katarska',\r\n        date: new Date(2020, 10, 11),\r\n        job: JOB_TYPES.COOK,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 12,\r\n        name: 'Lucjan Lukrowicz',\r\n        date: new Date(2020, 11, 12),\r\n        job: JOB_TYPES.WAITER,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 13,\r\n        name: 'Mikołaj Miłosławski',\r\n        date: new Date(2020, 0, 13),\r\n        job: JOB_TYPES.CLEANER,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 14,\r\n        name: 'Nicol Niżna',\r\n        date: new Date(2020, 1, 14),\r\n        job: JOB_TYPES.HELP,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 15,\r\n        name: 'Oskar Oparski',\r\n        date: new Date(2020, 2, 15),\r\n        job: JOB_TYPES.SERVICE,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 16,\r\n        name: 'Patryk Przybylski',\r\n        date: new Date(2020, 3, 16),\r\n        job: JOB_TYPES.COOK,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 17,\r\n        name: 'Roksana Rusiecka',\r\n        date: new Date(2020, 4, 17),\r\n        job: JOB_TYPES.WAITER,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 18,\r\n        name: 'Sabina Sadowska',\r\n        date: new Date(2020, 5, 18),\r\n        job: JOB_TYPES.CLEANER,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 19,\r\n        name: 'Tomasz Tokarz',\r\n        date: new Date(2020, 6, 19),\r\n        job: JOB_TYPES.HELP,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 20,\r\n        name: 'Urszula Uniejska',\r\n        date: new Date(2020, 7, 20),\r\n        job: JOB_TYPES.SERVICE,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 21,\r\n        name: 'Waldemar Wolski',\r\n        date: new Date(2020, 8, 21),\r\n        job: JOB_TYPES.COOK,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 22,\r\n        name: 'Zofia Zamojska',\r\n        date: new Date(2020, 9, 22),\r\n        job: JOB_TYPES.WAITER,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 23,\r\n        name: 'Adrianna Adamska',\r\n        date: new Date(2020, 10, 23),\r\n        job: JOB_TYPES.CLEANER,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 24,\r\n        name: 'Tomasz Adamski',\r\n        date: new Date(2020, 11, 24),\r\n        job: JOB_TYPES.HELP,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n];\r\n\r\nexport const MULTISELECTABLE_OPTIONS = [\r\n    {\r\n        title: 'Stanowiska',\r\n        options: JOB_OPTIONS,\r\n        filterKey: 'jobs',\r\n    },\r\n    {\r\n        title: 'Lokalizacje',\r\n        options: LOCATIONS_OPTIONS,\r\n        filterKey: 'locations',\r\n    },\r\n    {\r\n        title: 'Pracownicy',\r\n        options: EMPLOYEES,\r\n        filterKey: 'employees',\r\n    },\r\n    {\r\n        title: 'Warunki zatrudnienia',\r\n        options: AGREEMENT_OPTIONS,\r\n        filterKey: 'agreements',\r\n    },\r\n];\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faAddressBook,\r\n    faChartBar,\r\n    faPhoneSquareAlt,\r\n    faEnvelope,\r\n    faInfoCircle,\r\n    faSearch,\r\n    faSortDown,\r\n    faCalendarAlt,\r\n    faChevronCircleRight,\r\n    faChevronCircleLeft,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { ICONS_NAMES } from '../../../mock-data/mock.data';\r\nimport './icon.styles.scss';\r\n\r\n/**\r\n * Component used as selectable icon\r\n *\r\n * @param {string} iconName icon name used to select icon displayed in component\r\n * @param {boolean} customCSSClass custom styling class\r\n *\r\n * @return  {FC} Icon component\r\n *\r\n * @component\r\n * @example\r\n * const iconName = 'book'\r\n * const customCSSClass = 'custom-class'\r\n *\r\n * return (\r\n *    <Icon iconName={iconName} customCSSClass={customCSSClass} />\r\n * )\r\n *\r\n */\r\n\r\nconst Icon = ({ iconName, customCSSClass }) => {\r\n    const {\r\n        BOOK,\r\n        CHART,\r\n        PHONE,\r\n        ENVELOPE,\r\n        INFO,\r\n        SEARCH,\r\n        SORT,\r\n        CALENDAR,\r\n        NEXT,\r\n        PREVIOUS,\r\n    } = ICONS_NAMES;\r\n\r\n    const getIcon = (icon) => {\r\n        switch (icon) {\r\n            case BOOK:\r\n                return faAddressBook;\r\n            case CHART:\r\n                return faChartBar;\r\n            case PHONE:\r\n                return faPhoneSquareAlt;\r\n            case ENVELOPE:\r\n                return faEnvelope;\r\n            case INFO:\r\n                return faInfoCircle;\r\n            case SEARCH:\r\n                return faSearch;\r\n            case SORT:\r\n                return faSortDown;\r\n            case CALENDAR:\r\n                return faCalendarAlt;\r\n            case NEXT:\r\n                return faChevronCircleRight;\r\n            case PREVIOUS:\r\n                return faChevronCircleLeft;\r\n            default:\r\n                return faInfoCircle;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FontAwesomeIcon\r\n            icon={getIcon(iconName)}\r\n            className={customCSSClass ? `icon--${customCSSClass}` : 'icon'}\r\n            role=\"presentation\"\r\n        />\r\n    );\r\n};\r\n\r\nIcon.propTypes = {\r\n    iconName: PropTypes.string,\r\n    customCSSClass: PropTypes.string,\r\n};\r\n\r\nIcon.defaultProps = {\r\n    iconName: '',\r\n    customCSSClass: '',\r\n};\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from '../../shared/icon/icon.component';\r\nimport { NAVIGATION_ICONS } from '../../../mock-data/mock.data';\r\nimport './navbar.styles.scss';\r\n\r\n/**\r\n * Component used as navigation bar\r\n *\r\n * @param {boolean} isNavbarOpen decides wheather navbar should get class which allows navbar to be open on mobile devices\r\n *\r\n * @return  {FC} Navbar component\r\n *\r\n * @component\r\n * @example\r\n * const isNavbarOpen = false\r\n *\r\n * return (\r\n *    <Navbar isNavbarOpen={isNavbarOpen} />\r\n * )\r\n *\r\n */\r\n\r\nconst Navbar = ({ isNavbarOpen }) => (\r\n    <nav\r\n        className={`navbar ${isNavbarOpen ? 'navbar--open' : undefined}`}\r\n        role=\"navigation\"\r\n    >\r\n        <ul className=\"navbar__list\">\r\n            {NAVIGATION_ICONS.map(({ ICON_NAME, TEXT }) => (\r\n                <li className=\"navbar__item\" key={ICON_NAME}>\r\n                    <Icon iconName={ICON_NAME} />\r\n                    <span>{TEXT}</span>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nNavbar.propTypes = {\r\n    isNavbarOpen: PropTypes.bool.isRequired,\r\n};\r\nexport default Navbar;\r\n","import React, { useState } from 'react';\r\nimport ToggleButton from './toggle-button/toggle-button.component';\r\nimport Backdrop from '../shared/backdrop/backdrop.component';\r\nimport Navbar from './navbar/navbar.component';\r\nimport './navigation.styles.scss';\r\n\r\n/**\r\n * Component used as navigation which contains navigation bar, toggle button and backdrop\r\n *\r\n *\r\n * @return  {FC} Navigation component\r\n *\r\n * @component\r\n * @example\r\n *\r\n * return (\r\n *    <Navigation />\r\n * )\r\n *\r\n */\r\n\r\nconst Navigation = () => {\r\n    const [isNavbarOpen, setIsNavbarOpen] = useState(false);\r\n\r\n    const openNavbar = () => {\r\n        setIsNavbarOpen(true);\r\n    };\r\n\r\n    const closeNavbar = () => {\r\n        setIsNavbarOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ToggleButton openNavbar={openNavbar} />\r\n            <Navbar isNavbarOpen={isNavbarOpen} />\r\n            {isNavbarOpen && <Backdrop closeFunction={closeNavbar} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './primary-button.styles.scss';\r\n\r\n/**\r\n * Component used as primary button\r\n *\r\n * @param {string} text text rendered inside button\r\n * @param {function} buttonFunction function to be called on button click\r\n * @param {string} customCSSClass custom styling class\r\n *\r\n * @return  {FC} PrimaryButton component\r\n *\r\n * @component\r\n * @example\r\n * const text = 'Filter'\r\n * const buttonFunction = () =>{}\r\n * const customCSSClass = 'custom-class'\r\n *\r\n * return (\r\n *    <PrimaryButton text={text} buttonFunction={buttonFunction} customCSSClass={customCSSClass} />\r\n * )\r\n *\r\n */\r\n\r\nconst PrimaryButton = ({ text, buttonFunction, customCSSClass }) => {\r\n    return (\r\n        <button\r\n            onClick={buttonFunction}\r\n            type=\"button\"\r\n            className={`primary-button ${customCSSClass}`}\r\n        >\r\n            {text}\r\n        </button>\r\n    );\r\n};\r\n\r\nPrimaryButton.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    buttonFunction: PropTypes.func,\r\n    customCSSClass: PropTypes.string,\r\n};\r\n\r\nPrimaryButton.defaultProps = {\r\n    buttonFunction: () => {},\r\n    customCSSClass: '',\r\n};\r\n\r\nexport default PrimaryButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from '../../../shared/icon/icon.component';\r\nimport { ICONS_NAMES } from '../../../../mock-data/mock.data';\r\nimport './text-input.styles.scss';\r\n\r\n/**\r\n * Component used as text input\r\n *\r\n * @param {string} placeholder placeholder used in text input\r\n * @param {boolean} isDropdown informs if text input is used in dropdown\r\n * @param {function} handeNameSearchChange function used to handle input text change\r\n * @param {function} handleKeyPress function used to handle enter key press on input focus\r\n *\r\n * @return  {FC} TextInput component\r\n *\r\n * @component\r\n * @example\r\n * const placeholder = 'Please type something...'\r\n * const isDropdown = false\r\n * const handeNameSearchChange = () => {}\r\n * const handleKeyPress = () => {}\r\n *\r\n * return (\r\n *    <TextInput placeholder={placeholder} isDropdown={isDropdown} handeNameSearchChange={handeNameSearchChange} handleKeyPress={handleKeyPress}/>\r\n * )\r\n *\r\n */\r\n\r\nconst TextInput = ({\r\n    placeholder,\r\n    isDropdown,\r\n    handeNameSearchChange,\r\n    handleKeyPress,\r\n}) => (\r\n    <div className={isDropdown ? 'text-input--container' : undefined}>\r\n        {isDropdown && (\r\n            <Icon\r\n                iconName={ICONS_NAMES.SEARCH}\r\n                customCSSClass={ICONS_NAMES.SEARCH}\r\n            />\r\n        )}\r\n        <input\r\n            type=\"text\"\r\n            placeholder={placeholder}\r\n            className={isDropdown ? 'text-input--dropdown' : 'text-input'}\r\n            onChange={handeNameSearchChange}\r\n            onKeyPress={handleKeyPress}\r\n        />\r\n    </div>\r\n);\r\n\r\nTextInput.propTypes = {\r\n    placeholder: PropTypes.string.isRequired,\r\n    isDropdown: PropTypes.bool,\r\n    handeNameSearchChange: PropTypes.func,\r\n    handleKeyPress: PropTypes.func,\r\n};\r\n\r\nTextInput.defaultProps = {\r\n    isDropdown: false,\r\n    handeNameSearchChange: () => {},\r\n    handleKeyPress: () => {},\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './table-row-head.styles.scss';\r\n\r\n/**\r\n * Component used as table row used in table head\r\n *\r\n * @param {String[]} data array of strings displayed as table headings\r\n *\r\n * @return  {FC} TableRowHead component\r\n *\r\n * @component\r\n * @example\r\n * const data = ['headingOne', 'headingTwo']\r\n *\r\n * return (\r\n *    <TableRowHead data={data} />\r\n * )\r\n *\r\n */\r\n\r\nconst TableRowHead = ({ data }) => (\r\n    <tr className=\"table-row-head\">\r\n        <>\r\n            {data.map((heading, index) => (\r\n                <th\r\n                    className={\r\n                        index > 0 ? `table-row-head__cell--high` : undefined\r\n                    }\r\n                    key={heading}\r\n                >\r\n                    {heading}\r\n                </th>\r\n            ))}\r\n\r\n            <th className=\"table-row-head__cell--low\">Szczegóły</th>\r\n        </>\r\n    </tr>\r\n);\r\n\r\nTableRowHead.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n};\r\n\r\nexport default TableRowHead;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// window width hook\r\n\r\nconst getWindowWidth = () => window.innerWidth;\r\n\r\nexport const useWindowWidth = () => {\r\n    const [windowWidth, setWindowWidth] = useState(getWindowWidth());\r\n\r\n    useEffect(() => {\r\n        const handleWindowWithChange = () => {\r\n            setWindowWidth(getWindowWidth());\r\n        };\r\n        window.addEventListener('resize', handleWindowWithChange);\r\n\r\n        return () =>\r\n            window.removeEventListener('resize', handleWindowWithChange);\r\n    }, []);\r\n\r\n    return windowWidth;\r\n};\r\n\r\n// filters\r\n\r\nexport const filterName = (searchName, arr) =>\r\n    arr.filter((element) => {\r\n        const elementName =\r\n            typeof element === 'string' ? element : element.name;\r\n        return searchName\r\n            ? elementName.toLowerCase().includes(searchName.toLowerCase())\r\n            : element;\r\n    });\r\n\r\nexport const filterThroughFilters = (filters, arr) => {\r\n    const {\r\n        date: { startDate, endDate },\r\n        jobs,\r\n        locations,\r\n        agreements,\r\n    } = filters;\r\n\r\n    const filterStartDate = (element) =>\r\n        startDate ? element.date >= startDate : element;\r\n    const filterEndDate = (element) =>\r\n        endDate ? element.date <= endDate : element;\r\n\r\n    const filterJobs = (element) =>\r\n        jobs.length ? jobs.includes(element.job) : element;\r\n\r\n    const filterLocations = (element) =>\r\n        locations.length\r\n            ? locations.some((loc) => element.locations.includes(loc))\r\n            : element;\r\n\r\n    const filterAgreements = (element) =>\r\n        agreements.length ? agreements.includes(element.agreement) : element;\r\n\r\n    return arr\r\n        .filter(filterStartDate)\r\n        .filter(filterEndDate)\r\n        .filter(filterJobs)\r\n        .filter(filterLocations)\r\n        .filter(filterAgreements);\r\n};\r\n\r\nexport const formatDateToString = (fullDate) => {\r\n    if (fullDate instanceof Date) {\r\n        const day = fullDate.getDay();\r\n        const month = fullDate.getMonth() + 1;\r\n        const year = fullDate.getFullYear();\r\n\r\n        return `${day}/${month < 10 ? `0${month}` : month}/${year}`;\r\n    }\r\n    return '-';\r\n};\r\n\r\nexport const formatStringsFromArr = (arr) => {\r\n    return Array.isArray(arr)\r\n        ? arr.map((el, index) => (index === arr.length - 1 ? el : `${el}, `))\r\n        : '-';\r\n};\r\n\r\n// proptypes\r\n\r\nexport const EMPLOYEE_PROPTYPES = PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    date: PropTypes.instanceOf(Date).isRequired,\r\n    job: PropTypes.string.isRequired,\r\n    agreement: PropTypes.string.isRequired,\r\n    locations: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n});\r\n\r\nexport const SEARCH_FILTERS_PROPTYPES = PropTypes.shape({\r\n    date: PropTypes.shape({\r\n        startDate: PropTypes.oneOfType([\r\n            PropTypes.instanceOf(Date),\r\n            PropTypes.oneOf([null]),\r\n        ]),\r\n        endDate: PropTypes.oneOfType([\r\n            PropTypes.instanceOf(Date),\r\n            PropTypes.oneOf([null]),\r\n        ]),\r\n    }),\r\n    jobs: PropTypes.arrayOf(PropTypes.string),\r\n    locations: PropTypes.arrayOf(PropTypes.string),\r\n    agreements: PropTypes.arrayOf(PropTypes.string),\r\n    employees: PropTypes.arrayOf(EMPLOYEE_PROPTYPES),\r\n});\r\n","import React from 'react';\r\nimport Icon from '../../../../shared/icon/icon.component';\r\nimport {\r\n    EMPLOYEE_PROPTYPES,\r\n    formatDateToString,\r\n    formatStringsFromArr,\r\n} from '../../../helpers.js';\r\nimport { ICONS_NAMES } from '../../../../../mock-data/mock.data';\r\nimport './table-row-body.styles.scss';\r\n\r\n/**\r\n * Component used as table row used in table body\r\n *\r\n * @param {Object} data single row data\r\n * @param {number} data.id id associated with record\r\n * @param {string} data.name name associated with record\r\n * @param {date} data.date date associated with record\r\n * @param {string} data.job job type associated with record\r\n * @param {string} data.agreement agreement type associated with record\r\n * @param {string} data.locations locations associated with record\r\n *\r\n * @return  {FC} TableRowBody component\r\n *\r\n * @component\r\n * @example\r\n * const data = {\r\n *                  id: 1,\r\n *                  name: 'John Smith',\r\n *                  date: new Date(),\r\n *                  job: 'cook',\r\n *                  agreement: 'pernament',\r\n *                  locations: ['loc1', 'loc2']\r\n *              }\r\n *\r\n * return (\r\n *    <TableRowBody data={data} />\r\n * )\r\n *\r\n */\r\n\r\nconst TableRowBody = ({ data }) => {\r\n    const { name, date, job, agreement, locations } = data;\r\n\r\n    return (\r\n        <tr className=\"table-row-body\">\r\n            <td>{name}</td>\r\n            <td className=\"table-row-body__cell--high\">\r\n                {formatDateToString(date)}\r\n            </td>\r\n            <td className=\"table-row-body__cell--high\">{job}</td>\r\n            <td className=\"table-row-body__cell--high\">{agreement}</td>\r\n            <td className=\"table-row-body__cell--high\">\r\n                {formatStringsFromArr(locations)}\r\n            </td>\r\n            <td className=\"table-row-body__cell--low\">\r\n                <Icon iconName={ICONS_NAMES.INFO} />\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nTableRowBody.propTypes = {\r\n    data: EMPLOYEE_PROPTYPES.isRequired,\r\n};\r\nexport default TableRowBody;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TableRowHead from './table-row/table-row-head/table-row-head.component';\r\nimport TableRowBody from './table-row/table-row-body/table-row-body.component';\r\nimport { EMPLOYEES_HEADERS } from '../../../mock-data/mock.data';\r\nimport { EMPLOYEE_PROPTYPES } from '../helpers';\r\nimport './table.styles.scss';\r\n\r\n/**\r\n * Component used as table\r\n *\r\n * @param {Object[]} data array of data with records details\r\n * @param {number} data[].id id associated with record\r\n * @param {string} data[].name name associated with record\r\n * @param {date} data[].date date associated with record\r\n * @param {string} data[].job job type associated with record\r\n * @param {string} data[].agreement agreement type associated with record\r\n * @param {string} data[].locations locations associated with record\r\n *\r\n * @return  {FC} Table component\r\n *\r\n * @component\r\n * @example\r\n * const data = [{\r\n *                  id: 1,\r\n *                  name: 'John Smith',\r\n *                  date: new Date(),\r\n *                  job: 'cook',\r\n *                  agreement: 'pernament',\r\n *                  locations: ['loc1', 'loc2']\r\n *              }]\r\n *\r\n * return (\r\n *    <Table data={data} />\r\n * )\r\n *\r\n */\r\n\r\nconst Table = ({ data }) => {\r\n    const dataLength = data.length;\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <thead className=\"table__head\">\r\n                <TableRowHead data={EMPLOYEES_HEADERS} />\r\n            </thead>\r\n\r\n            <tbody\r\n                className={`table__body ${\r\n                    !dataLength ? 'table__body--empty' : undefined\r\n                }`}\r\n            >\r\n                {dataLength ? (\r\n                    data.map((employee) => (\r\n                        <TableRowBody data={employee} key={employee.id} />\r\n                    ))\r\n                ) : (\r\n                    <tr>\r\n                        <td>Brak wyników spełniających wymagania</td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n            <tfoot className=\"table__foot\">\r\n                <tr>\r\n                    <td>Suma rekordów wynosi: {dataLength}</td>\r\n                </tr>\r\n            </tfoot>\r\n        </table>\r\n    );\r\n};\r\n\r\nTable.propTypes = {\r\n    data: PropTypes.arrayOf(EMPLOYEE_PROPTYPES),\r\n};\r\n\r\nTable.defaultProps = {\r\n    data: [],\r\n};\r\nexport default Table;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './checkbox.styles.scss';\r\n\r\n/**\r\n * Component used as checkbox element with label\r\n *\r\n * @param {string} element name used as label\r\n * @param {boolean} isChecked informs whether checkbox should be checked\r\n *\r\n * @return  {FC} Checkbox component\r\n *\r\n * @component\r\n * @example\r\n * const element = 'Option element'\r\n * const isChecked = false\r\n *\r\n * return (\r\n *    <Checkbox element={element} isChecked={isChecked} />\r\n * )\r\n *\r\n */\r\n\r\nconst Checkbox = ({ element, isChecked }) => {\r\n    const preventDefault = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"checkbox\"\r\n            onClick={(event) => preventDefault(event)}\r\n            role=\"button\"\r\n            tabIndex={0}\r\n        >\r\n            <label\r\n                htmlFor={element}\r\n                className={`checkbox__label ${\r\n                    isChecked ? 'checkbox__label--checked' : undefined\r\n                }`}\r\n                data-testid=\"checkbox\"\r\n            >\r\n                {element}\r\n                <input\r\n                    type=\"checkbox\"\r\n                    id={element}\r\n                    className=\"checkbox__input\"\r\n                />\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nCheckbox.propTypes = {\r\n    element: PropTypes.string.isRequired,\r\n    isChecked: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Checkbox;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Checkbox from '../checkbox/checkbox.component';\r\nimport TextInput from '../text-input/text-input.component';\r\nimport { filterName, EMPLOYEE_PROPTYPES } from '../../helpers';\r\nimport './multiselect-dropdown.styles.scss';\r\n\r\nconst INITIAL_HEIGHT = 80;\r\nconst ELEMENT_HEIGHT = 40;\r\nconst MAX_EEMENT_NUM = 4;\r\nconst OFFSET = 1;\r\nconst MAX_LIST_HEIGHT = ELEMENT_HEIGHT * MAX_EEMENT_NUM + OFFSET;\r\n\r\n/**\r\n * Component used as multiselect dropdown\r\n *\r\n * @param {String[]} selectOptions array of avaliable options\r\n * @param {Object[]} filtredRecords array of object with filtred records\r\n * @param {number} filtredRecords.id id associated with record\r\n * @param {string} filtredRecords.name name associated with record\r\n * @param {date} filtredRecords.date date associated with record\r\n * @param {string} filtredRecords.job job type associated with record\r\n * @param {string} filtredRecords.agreement agreement type associated with record\r\n * @param {string} filtredRecords.locations locations associated with record\r\n * @param {array} selectedOptions array of selected options\r\n * @param {function} setSelectedOptions function used to set selected options\r\n * @param {boolean} isEmployeesMultiselect informs whether it's multiselect dropdown for employee or not\r\n * @param {boolean} areFiltersEmpty informs whether used filters are empty\r\n *\r\n * @return  {FC} MultiselectDropdown component\r\n *\r\n * @component\r\n * @example\r\n * const selectOptions = []\r\n * const filtredRecords = [{\r\n *                  id: 1,\r\n *                  name: 'John Smith',\r\n *                  date: new Date(),\r\n *                  job: 'cook',\r\n *                  agreement: 'pernament',\r\n *                  locations: ['loc1', 'loc2']\r\n *              }]\r\n * const selectedOptions = []\r\n * const setSelectedOptions = () => {}\r\n * const isEmployeesMultiselect = false;\r\n * const areFiltersEmpty = true;\r\n *\r\n * return (\r\n *    <MultiselectDropdown\r\n *      selectOptions={selectOptions}\r\n *      filtredRecords={filtredRecords}\r\n *      selectedOptions={selectedOptions}\r\n *      setSelectedOptions={setSelectedOptions}\r\n *      isEmployeesMultiselect={isEmployeesMultiselect}\r\n *      areFiltersEmpty={areFiltersEmpty}\r\n *    />\r\n * )\r\n *\r\n */\r\n\r\nconst MultiselectDropdown = ({\r\n    selectOptions,\r\n    filtredRecords,\r\n    selectedOptions,\r\n    setSelectedOptions,\r\n    isEmployeesMultiselect,\r\n    areFiltersEmpty,\r\n}) => {\r\n    const options = isEmployeesMultiselect ? filtredRecords : selectOptions;\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [filtredOptions, setFiltredOptions] = useState(options);\r\n\r\n    const handeSearchChange = ({ target: { value } }) => {\r\n        setSearchValue(value);\r\n    };\r\n\r\n    const shouldFiltredOptionsBeCleared =\r\n        isEmployeesMultiselect && areFiltersEmpty;\r\n\r\n    useEffect(() => {\r\n        setFiltredOptions(\r\n            shouldFiltredOptionsBeCleared\r\n                ? []\r\n                : filterName(searchValue, options)\r\n        );\r\n    }, [searchValue, areFiltersEmpty]);\r\n\r\n    const numberOfElements = options.length;\r\n    const listHeight = numberOfElements * ELEMENT_HEIGHT + OFFSET;\r\n    const listFixedHeight =\r\n        listHeight >= MAX_LIST_HEIGHT ? MAX_LIST_HEIGHT : listHeight;\r\n    const dropdownHeight = INITIAL_HEIGHT + listFixedHeight;\r\n\r\n    const filtredOptionsLength = filtredOptions.length;\r\n\r\n    const areOptionsEqual =\r\n        JSON.stringify(filtredOptions) === JSON.stringify(selectedOptions);\r\n\r\n    const handleAllOptionsSelect = () =>\r\n        setSelectedOptions(areOptionsEqual ? [] : filtredOptions);\r\n\r\n    const handleSingleOptionSelect = (el) => {\r\n        const index = selectedOptions.indexOf(el);\r\n        const isInArray = index > -1;\r\n        const updatedOptions = [...selectedOptions];\r\n\r\n        if (isInArray) {\r\n            updatedOptions.splice(index, 1);\r\n        } else {\r\n            updatedOptions.push(el);\r\n        }\r\n\r\n        setSelectedOptions(updatedOptions);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"multiselect-dropdown\"\r\n            style={{ height: `${dropdownHeight}px` }}\r\n        >\r\n            <div className=\"multiselect-dropdown__element\">\r\n                <TextInput\r\n                    placeholder=\"Szukaj...\"\r\n                    isDropdown\r\n                    handeNameSearchChange={handeSearchChange}\r\n                />\r\n            </div>\r\n            <div\r\n                className=\"multiselect-dropdown__element\"\r\n                onClick={handleAllOptionsSelect}\r\n            >\r\n                <Checkbox\r\n                    element=\"Wszystkie\"\r\n                    isChecked={areOptionsEqual && !!filtredOptionsLength}\r\n                />\r\n            </div>\r\n\r\n            <ul\r\n                className={`multiselect-dropdown__list ${\r\n                    !filtredOptionsLength\r\n                        ? 'multiselect-dropdown__list--empty'\r\n                        : undefined\r\n                }`}\r\n                style={{ height: `${listFixedHeight}px` }}\r\n            >\r\n                {filtredOptionsLength\r\n                    ? filtredOptions.map((el) => {\r\n                          const elementName =\r\n                              typeof el === 'string' ? el : el.name;\r\n\r\n                          return (\r\n                              <li\r\n                                  key={elementName}\r\n                                  className=\"multiselect-dropdown__element\"\r\n                                  onClick={() => handleSingleOptionSelect(el)}\r\n                                  role=\"menuitem\"\r\n                              >\r\n                                  <Checkbox\r\n                                      element={elementName}\r\n                                      isChecked={selectedOptions.includes(el)}\r\n                                  />\r\n                              </li>\r\n                          );\r\n                      })\r\n                    : 'Brak elementów'}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nMultiselectDropdown.propTypes = {\r\n    selectOptions: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([PropTypes.string, EMPLOYEE_PROPTYPES])\r\n    ).isRequired,\r\n    filtredRecords: PropTypes.arrayOf(EMPLOYEE_PROPTYPES).isRequired,\r\n    selectedOptions: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([PropTypes.string, EMPLOYEE_PROPTYPES])\r\n    ).isRequired,\r\n    setSelectedOptions: PropTypes.func.isRequired,\r\n    isEmployeesMultiselect: PropTypes.bool.isRequired,\r\n    areFiltersEmpty: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default MultiselectDropdown;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MultiselectDropdown from '../../inputs/multiselect-dropdown/multiselect-dropdown.component';\r\nimport Icon from '../../../shared/icon/icon.component';\r\nimport { ICONS_NAMES } from '../../../../mock-data/mock.data';\r\nimport { EMPLOYEE_PROPTYPES, useWindowWidth } from '../../helpers';\r\nimport './modal-multiselect.styles.scss';\r\n\r\nconst MAX_WINDOW_WIDTH = 500;\r\n\r\n/**\r\n * Component used as modal element with dropdown\r\n *\r\n * @param {string} title title of label\r\n * @param {Array} options array of avaliable options\r\n * @param {function} handleModalRuleChange function to handle modal behavior\r\n * @param {boolean} isAnyModalOpen informs if any other modal is opened\r\n * @param {function} updateFilterValues function used to update values of filters\r\n * @param {string} filterKey key of filter\r\n * @param {boolean} areFiltersEmpty informs if filters are empty\r\n * @param {Object[]} filtredRecords array of filtred records\r\n *\r\n * @return  {FC} ModalMultiselect component\r\n *\r\n * @component\r\n * @example\r\n * const title = 'Some title'\r\n * const options = []\r\n * const handleModalRuleChange = () => {}\r\n * const isAnyModalOpen = false\r\n * const updateFilterValues = () => {}\r\n * const filterKey = 'jobs'\r\n * const areFiltersEmpty = false\r\n * const filtredRecords = []\r\n *\r\n * return (\r\n *    <ModalMultiselect\r\n *      title={title}\r\n *      options={options}\r\n *      handleModalRuleChange={handleModalRuleChange}\r\n *      isAnyModalOpen={isAnyModalOpen}\r\n *      updateFilterValues={updateFilterValues}\r\n *      filterKey={filterKey}\r\n *      areFiltersEmpty={areFiltersEmpty}\r\n *      filtredRecords={filtredRecords}\r\n *    />\r\n * )\r\n *\r\n */\r\n\r\nconst ModalMultiselect = ({\r\n    title,\r\n    options,\r\n    handleModalRuleChange,\r\n    isAnyModalOpen,\r\n    updateFilterValues,\r\n    filterKey,\r\n    areFiltersEmpty,\r\n    filtredRecords,\r\n}) => {\r\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n    const [selectedOptions, setSelectedOptions] = useState([]);\r\n    const windowWidth = useWindowWidth();\r\n    const isWindowWidthValid = windowWidth <= MAX_WINDOW_WIDTH;\r\n\r\n    useEffect(() => {\r\n        updateFilterValues(filterKey, selectedOptions);\r\n    }, [selectedOptions]);\r\n\r\n    const handleDropdownOpen = () => {\r\n        setIsDropdownOpen(true);\r\n        handleModalRuleChange(true);\r\n    };\r\n\r\n    const handleDropdownClose = () => {\r\n        if (isDropdownOpen) {\r\n            setIsDropdownOpen(false);\r\n            handleModalRuleChange(false);\r\n        }\r\n    };\r\n\r\n    const isEmployeesMultiselect = filterKey === 'employees';\r\n\r\n    const isSelectedOptionInFiltredRecords = selectedOptions.every((val) =>\r\n        filtredRecords.includes(val)\r\n    );\r\n    const shouldSelectedOptionsBeCleared =\r\n        isEmployeesMultiselect &&\r\n        (areFiltersEmpty || !isSelectedOptionInFiltredRecords);\r\n\r\n    const validateEmployees = () => {\r\n        if (shouldSelectedOptionsBeCleared) {\r\n            setSelectedOptions([]);\r\n            return 'Wybierz';\r\n        }\r\n    };\r\n\r\n    const getOptionName = (option) =>\r\n        typeof option === 'object' ? option.name : option;\r\n\r\n    const getInputValue = () => {\r\n        const selectedOptionsLength = selectedOptions.length;\r\n\r\n        if (selectedOptionsLength) {\r\n            validateEmployees();\r\n            const firstOption = getOptionName(selectedOptions[0]);\r\n            const validWidthMultipleOptions = `${firstOption}  +${\r\n                selectedOptionsLength - 1\r\n            }`;\r\n\r\n            switch (selectedOptionsLength) {\r\n                case 1:\r\n                    return `${firstOption}`;\r\n                case 2:\r\n                    return isWindowWidthValid\r\n                        ? validWidthMultipleOptions\r\n                        : `${firstOption}, ${getOptionName(\r\n                              selectedOptions[1]\r\n                          )}`;\r\n                default:\r\n                    return isWindowWidthValid\r\n                        ? validWidthMultipleOptions\r\n                        : `${firstOption}, ${getOptionName(\r\n                              selectedOptions[1]\r\n                          )} +${selectedOptionsLength - 2}`;\r\n            }\r\n        } else {\r\n            return 'Wybierz';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-multiselect\">\r\n            <div\r\n                className=\"modal-multiselect__texts-container\"\r\n                onClick={\r\n                    isAnyModalOpen ? handleDropdownClose : handleDropdownOpen\r\n                }\r\n            >\r\n                <span className=\"modal-multiselect__description\">{title}</span>\r\n                <div className=\"modal-multiselect__value-container\">\r\n                    <div\r\n                        className=\"modal-multiselect__value\"\r\n                        data-testid=\"multiselect-value\"\r\n                    >\r\n                        {getInputValue()}\r\n                    </div>\r\n                    <Icon\r\n                        iconName={ICONS_NAMES.SORT}\r\n                        customCSSClass={ICONS_NAMES.SORT}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {isDropdownOpen && (\r\n                <MultiselectDropdown\r\n                    selectOptions={options}\r\n                    filtredRecords={filtredRecords}\r\n                    selectedOptions={selectedOptions}\r\n                    setSelectedOptions={setSelectedOptions}\r\n                    isEmployeesMultiselect={isEmployeesMultiselect}\r\n                    areFiltersEmpty={areFiltersEmpty}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nModalMultiselect.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    options: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([PropTypes.string, EMPLOYEE_PROPTYPES])\r\n    ).isRequired,\r\n    handleModalRuleChange: PropTypes.func.isRequired,\r\n    isAnyModalOpen: PropTypes.bool.isRequired,\r\n    updateFilterValues: PropTypes.func.isRequired,\r\n    filterKey: PropTypes.string.isRequired,\r\n    areFiltersEmpty: PropTypes.bool.isRequired,\r\n    filtredRecords: PropTypes.arrayOf(EMPLOYEE_PROPTYPES).isRequired,\r\n};\r\n\r\nexport default ModalMultiselect;\r\n","export const enPlMonths = {\r\n    January: 'Styczeń',\r\n    February: 'Luty',\r\n    March: 'Marzec',\r\n    April: 'Kwiecień',\r\n    May: 'Maj',\r\n    June: 'Czerwiec',\r\n    July: 'Lipiec',\r\n    August: 'Sierpień',\r\n    September: 'Wrzesień',\r\n    October: 'Październik',\r\n    November: 'Listopad',\r\n    December: 'Grudzień',\r\n};\r\n\r\nexport const getColors = (isSelected, isSelectedStartOrEnd) => {\r\n    return ({ selectedFirstOrLastColor, normalColor, selectedColor }) => {\r\n        if (isSelectedStartOrEnd) {\r\n            return selectedFirstOrLastColor;\r\n        }\r\n        if (isSelected) {\r\n            return selectedColor;\r\n        }\r\n        return normalColor;\r\n    };\r\n};\r\n","import { createContext } from 'react';\r\n\r\nexport const datepickerContextDefaultValue = {\r\n    focusedDate: null,\r\n    isDateFocused: () => false,\r\n    isDateSelected: () => false,\r\n    isDateHovered: () => false,\r\n    isDateBlocked: () => false,\r\n    isFirstOrLastSelectedDate: () => false,\r\n    onDateFocus: () => {},\r\n    onDateHover: () => {},\r\n    onDateSelect: () => {},\r\n};\r\n\r\nexport default createContext(datepickerContextDefaultValue);\r\n","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDay } from '@datepicker-react/hooks';\r\nimport DatepickerContext from '../date-picker.context';\r\nimport { getColors } from '../helpers';\r\nimport './date-picker-day.styles.scss';\r\n\r\nconst COLORS = {\r\n    WHITE: '#ffffff',\r\n    BLACK: '#000000',\r\n    GREY: '#fbfbfb',\r\n    PRIMARY_ORANGE: '#ff6b01',\r\n    SECONDARY_ORANGE: '#ffac71',\r\n};\r\n\r\n/**\r\n * Component used as single day element in date picker\r\n *\r\n * @param {string} dayLabel single day label\r\n * @param {boolean} date full date associated with single day\r\n *\r\n * @return  {FC} PickerDay component\r\n *\r\n * @component\r\n * @example\r\n * const dayLabel = '5'\r\n * const date = false\r\n *\r\n * return (\r\n *    <PickerDay dayLabel={dayLabel} date={date} />\r\n * )\r\n *\r\n */\r\n\r\nconst PickerDay = ({ dayLabel, date }) => {\r\n    const contextValues = useContext(DatepickerContext);\r\n    const { isSelected, isSelectedStartOrEnd, onClick } = useDay({\r\n        date,\r\n        ...contextValues,\r\n    });\r\n\r\n    const getTrueColor = getColors(isSelected, isSelectedStartOrEnd);\r\n\r\n    return (\r\n        <>\r\n            {dayLabel ? (\r\n                <button\r\n                    onClick={onClick}\r\n                    type=\"button\"\r\n                    className=\"day-button\"\r\n                    style={{\r\n                        color: getTrueColor({\r\n                            selectedFirstOrLastColor: COLORS.WHITE,\r\n                            normalColor: COLORS.BLACK,\r\n                            selectedColor: COLORS.WHITE,\r\n                        }),\r\n                        background: getTrueColor({\r\n                            selectedFirstOrLastColor: COLORS.PRIMARY_ORANGE,\r\n                            normalColor: COLORS.WHITE,\r\n                            selectedColor: COLORS.SECONDARY_ORANGE,\r\n                        }),\r\n                    }}\r\n                >\r\n                    {dayLabel}\r\n                </button>\r\n            ) : (\r\n                <div role=\"presentation\" />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nPickerDay.propTypes = {\r\n    dayLabel: PropTypes.string,\r\n    date: PropTypes.instanceOf(Date).isRequired,\r\n};\r\n\r\nPickerDay.defaultProps = {\r\n    dayLabel: '',\r\n};\r\n\r\nexport default PickerDay;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useMonth } from '@datepicker-react/hooks';\r\nimport { enPlMonths } from '../helpers';\r\nimport PickerDay from '../date-picker-day/date-picker-day.component';\r\nimport './date-picker-month.styles.scss';\r\n\r\nconst WEEK_DAYS_LABELS = ['Pon', 'Wto', 'Śro', 'Czw', 'Pią', 'Sob', 'Nie'];\r\n\r\n/**\r\n * Component used to as single month in date picker\r\n *\r\n * @param {number} year given year\r\n * @param {number} month given month\r\n * @param {number} firstDayOfWeek given first day of the week\r\n *\r\n * @return  {FC} PickerMonth component\r\n *\r\n * @component\r\n * @example\r\n * const year = 2020\r\n * const month = 6\r\n * const firstDayOfWeek = 1\r\n *\r\n * return (\r\n *    <PickerMonth year={year} month={month} firstDayOfWeek={firstDayOfWeek} />\r\n * )\r\n *\r\n */\r\n\r\nconst PickerMonth = ({ year, month, firstDayOfWeek }) => {\r\n    const { days, monthLabel } = useMonth({\r\n        year,\r\n        month,\r\n        firstDayOfWeek,\r\n    });\r\n\r\n    const convertMonthLabelToPl = (label = monthLabel) => {\r\n        const splitedDate = label.split(' ');\r\n        const convertedMonth = enPlMonths[splitedDate[0]];\r\n\r\n        return `${convertedMonth} ${splitedDate[1]}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"month\">\r\n            <div className=\"month__month-label\">\r\n                <strong>{convertMonthLabelToPl()}</strong>\r\n            </div>\r\n            <div className=\"month__day-container\">\r\n                {WEEK_DAYS_LABELS.map((dayLabel) => (\r\n                    <div className=\"month__day-label\" key={dayLabel}>\r\n                        {dayLabel}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"month__day-space\">\r\n                {days.map((day, index) =>\r\n                    day ? (\r\n                        <PickerDay\r\n                            date={day.date}\r\n                            key={day.date.toString()}\r\n                            dayLabel={day.dayLabel}\r\n                        />\r\n                    ) : (\r\n                        <div key={index} />\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nPickerMonth.propTypes = {\r\n    year: PropTypes.number.isRequired,\r\n    month: PropTypes.number.isRequired,\r\n    firstDayOfWeek: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default PickerMonth;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from '../../../../shared/icon/icon.component';\r\nimport './date-picker-nav.styles.scss';\r\n\r\n/**\r\n * Component used to as navigation button for date picker\r\n *\r\n * @param {string} iconName icon name used as a button icon presented in button\r\n * @param {function} onClick function to be called on button click\r\n *\r\n * @return  {FC} PickerNavButton component\r\n *\r\n * @component\r\n * @example\r\n * const iconName = 'next'\r\n * const onClick = () =>{}\r\n *\r\n * return (\r\n *    <PickerNavButton iconName={iconName} onClick={onClick} />\r\n * )\r\n *\r\n */\r\n\r\nconst PickerNavButton = ({ iconName, onClick }) => (\r\n    <button className=\"nav-button\" type=\"button\" onClick={onClick}>\r\n        <Icon iconName={iconName} customCSSClass={iconName} />\r\n    </button>\r\n);\r\n\r\nPickerNavButton.propTypes = {\r\n    iconName: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func,\r\n};\r\n\r\nPickerNavButton.defaultProps = {\r\n    onClick: () => {},\r\n};\r\n\r\nexport default PickerNavButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './date-picker-handler.styles.scss';\r\n\r\n/**\r\n * Component used to perform actions connected with date picker such as clear or close action\r\n *\r\n * @param {string} text single day label\r\n * @param {function} clickFunction full date associated with single day\r\n *\r\n * @return  {FC} PickerHandler component\r\n *\r\n * @component\r\n * @example\r\n * const text = 'Clear'\r\n * const clickFunction = () =>{}\r\n *\r\n * return (\r\n *    <PickerHandler text={text} clickFunction={clickFunction} />\r\n * )\r\n *\r\n */\r\n\r\nconst PickerHandler = ({ text, clickFunction }) => (\r\n    <div\r\n        onClick={clickFunction}\r\n        role=\"button\"\r\n        tabIndex={0}\r\n        className=\"date-picker-control \"\r\n    >\r\n        {text}\r\n    </div>\r\n);\r\n\r\nPickerHandler.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    clickFunction: PropTypes.func,\r\n};\r\n\r\nPickerHandler.defaultProps = {\r\n    clickFunction: () => {},\r\n};\r\n\r\nexport default PickerHandler;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDatepicker } from '@datepicker-react/hooks';\r\nimport PickerMonth from './date-picker-month/date-picker-month.component';\r\nimport PickerNavButton from './date-picker-nav/date-picker-nav.component';\r\nimport PickerHandler from './date-picker-handler/date-picker-handler.component';\r\nimport { ICONS_NAMES } from '../../../../mock-data/mock.data';\r\nimport DatepickerContext from './date-picker.context';\r\nimport './date-picker.styles.scss';\r\n\r\nconst MIN_MONTH = 0;\r\nconst MAX_MONTH = 11;\r\n\r\n/**\r\n * Component used as date picker\r\n *\r\n * @param {Object} pickerState picker state\r\n * @param {date} pickerState.startDate picker start date\r\n * @param {date} pickerState.endDate picker end date\r\n * @param {string} pickerState focusedInput picker focused input\r\n * @param {function} handleDateChange function used to handle date change\r\n * @param {function} closeDropdown function used to close dropdown in which picker is used\r\n * @param {function} clearDatePicker function used to clear picker state\r\n *\r\n * @return  {FC} DatePicker component\r\n *\r\n * @component\r\n * @example\r\n * const pickerState = {\r\n *                  startDate: new Date(),\r\n *                  endDate: new Date(),\r\n *                  focusedInput: 'startDate'\r\n *                  }\r\n * const handleDateChange = () => {}\r\n * const closeDropdown = () => {}\r\n * const clearDatePicker = () => {}\r\n *\r\n * return (\r\n *    <DatePicker pickerState={pickerState} handleDateChange={handleDateChange} closeDropdown={closeDropdown} clearDatePicker={clearDatePicker} />\r\n * )\r\n *\r\n */\r\n\r\nconst DatePicker = ({\r\n    pickerState: { startDate, endDate, focusedInput },\r\n    handleDateChange,\r\n    closeDropdown,\r\n    clearDatePicker,\r\n}) => {\r\n    const {\r\n        firstDayOfWeek,\r\n        activeMonths,\r\n        isDateSelected,\r\n        isDateHovered,\r\n        isFirstOrLastSelectedDate,\r\n        isDateBlocked,\r\n        isDateFocused,\r\n        focusedDate,\r\n        onDateHover,\r\n        onDateSelect,\r\n        onDateFocus,\r\n        goToPreviousMonthsByOneMonth,\r\n        goToNextMonthsByOneMonth,\r\n    } = useDatepicker({\r\n        startDate,\r\n        endDate,\r\n        focusedInput,\r\n        onDatesChange: handleDateChange,\r\n    });\r\n\r\n    const currentMonth = activeMonths[0].month;\r\n    const currentYear = activeMonths[0].year;\r\n\r\n    const validateNavigation = (month, fnc) =>\r\n        currentMonth === month ? null : fnc;\r\n\r\n    return (\r\n        <DatepickerContext.Provider\r\n            value={{\r\n                focusedDate,\r\n                isDateFocused,\r\n                isDateSelected,\r\n                isDateHovered,\r\n                isDateBlocked,\r\n                isFirstOrLastSelectedDate,\r\n                onDateSelect,\r\n                onDateFocus,\r\n                onDateHover,\r\n            }}\r\n        >\r\n            <div className=\"date-picker\">\r\n                <div className=\"date-picker__controls-container\">\r\n                    <PickerHandler\r\n                        text=\"Wyczyść\"\r\n                        clickFunction={clearDatePicker}\r\n                    />\r\n                    <PickerHandler\r\n                        text=\"Zamknij\"\r\n                        clickFunction={closeDropdown}\r\n                    />\r\n                </div>\r\n\r\n                <PickerMonth\r\n                    year={currentYear}\r\n                    month={currentMonth}\r\n                    firstDayOfWeek={firstDayOfWeek}\r\n                />\r\n                <div className=\"date-picker__butons-container\">\r\n                    <PickerNavButton\r\n                        iconName={ICONS_NAMES.PREVIOUS}\r\n                        onClick={validateNavigation(\r\n                            MIN_MONTH,\r\n                            goToPreviousMonthsByOneMonth\r\n                        )}\r\n                    />\r\n                    <PickerNavButton\r\n                        iconName={ICONS_NAMES.NEXT}\r\n                        onClick={validateNavigation(\r\n                            MAX_MONTH,\r\n                            goToNextMonthsByOneMonth\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </DatepickerContext.Provider>\r\n    );\r\n};\r\n\r\nDatePicker.propTypes = {\r\n    pickerState: PropTypes.shape({\r\n        startDate: PropTypes.instanceOf(Date),\r\n        endDate: PropTypes.instanceOf(Date),\r\n        focusedInput: PropTypes.string,\r\n    }).isRequired,\r\n    handleDateChange: PropTypes.func.isRequired,\r\n    closeDropdown: PropTypes.func,\r\n    clearDatePicker: PropTypes.func.isRequired,\r\n};\r\n\r\nDatePicker.defaultProps = {\r\n    closeDropdown: () => {},\r\n};\r\n\r\nexport default DatePicker;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { START_DATE } from '@datepicker-react/hooks';\r\nimport PropTypes from 'prop-types';\r\nimport DatePicker from '../../inputs/date-picker/date-picker.component';\r\nimport Icon from '../../../shared/icon/icon.component';\r\nimport { ICONS_NAMES } from '../../../../mock-data/mock.data';\r\nimport './modal-date.styles.scss';\r\n\r\nconst INITIAL_PICKER_STATE = {\r\n    startDate: null,\r\n    endDate: null,\r\n    focusedInput: START_DATE,\r\n};\r\n\r\n/**\r\n * Component used as modal element with date picker dropdown\r\n *\r\n * @param {function} handleModalRuleChange function to handle modal behavior\r\n * @param {boolean} isAnyModalOpen informs if any other modal is opened\r\n * @param {function} updateFilterValues function used to update values of filters\r\n *\r\n * @return  {FC} ModalDate component\r\n *\r\n * @component\r\n * @example\r\n * const handleModalRuleChange = () => {}\r\n * const isAnyModalOpen = false\r\n * const updateFilterValues = () => {}\r\n *\r\n * return (\r\n *    <ModalDate\r\n *      handleModalRuleChange={handleModalRuleChange}\r\n *      isAnyModalOpen={isAnyModalOpen}\r\n *      updateFilterValues={updateFilterValues}\r\n *    />\r\n * )\r\n *\r\n */\r\n\r\nconst ModalDate = ({\r\n    handleModalRuleChange,\r\n    isAnyModalOpen,\r\n    updateFilterValues,\r\n}) => {\r\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n    const [pickerState, setPickerState] = useState(INITIAL_PICKER_STATE);\r\n\r\n    // dropdown handlers\r\n\r\n    const handleDropdownOpen = () => {\r\n        setIsDropdownOpen(true);\r\n        handleModalRuleChange(true);\r\n    };\r\n\r\n    const handleDropdownClose = () => {\r\n        if (isDropdownOpen) {\r\n            setIsDropdownOpen(false);\r\n            handleModalRuleChange(false);\r\n        }\r\n    };\r\n\r\n    // date picker handlers\r\n\r\n    const handleDateChange = (data) => {\r\n        if (!data.focusedInput) {\r\n            setPickerState({ ...data, focusedInput: START_DATE });\r\n        } else {\r\n            setPickerState(data);\r\n        }\r\n    };\r\n\r\n    const clearDatePicker = () => {\r\n        setPickerState(INITIAL_PICKER_STATE);\r\n    };\r\n\r\n    const { startDate, endDate } = pickerState;\r\n\r\n    useEffect(() => {\r\n        updateFilterValues('date', { startDate, endDate });\r\n    }, [pickerState]);\r\n\r\n    // display handlers\r\n\r\n    const formatDateToDMString = (date) => {\r\n        if (date instanceof Date) {\r\n            const day = date.getDate();\r\n            const month = date.getMonth() + 1;\r\n\r\n            return `${day}.${month < 10 ? `0${month}` : month}`;\r\n        }\r\n        return '';\r\n    };\r\n\r\n    const inputValue = startDate\r\n        ? `${formatDateToDMString(startDate)} - ${formatDateToDMString(\r\n              endDate\r\n          )}`\r\n        : 'Wybierz';\r\n\r\n    const canDropdownBeClosed =\r\n        (isAnyModalOpen && endDate) ||\r\n        (isAnyModalOpen && !startDate && !endDate);\r\n\r\n    return (\r\n        <div className=\"modal-date\">\r\n            <div\r\n                className=\"modal-date__texts-container\"\r\n                onClick={\r\n                    canDropdownBeClosed\r\n                        ? handleDropdownClose\r\n                        : handleDropdownOpen\r\n                }\r\n                role=\"button\"\r\n                tabIndex={0}\r\n            >\r\n                <Icon\r\n                    iconName={ICONS_NAMES.CALENDAR}\r\n                    customCSSClass={ICONS_NAMES.CALENDAR}\r\n                />\r\n\r\n                <div className=\"modal-date__value-container\">\r\n                    <span className=\"modal-date__description\">Okres</span>\r\n                    <div\r\n                        className=\"modal-date__value\"\r\n                        data-testid=\"modal-date-value\"\r\n                    >\r\n                        {inputValue}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {isDropdownOpen && (\r\n                <DatePicker\r\n                    pickerState={pickerState}\r\n                    handleDateChange={handleDateChange}\r\n                    clearDatePicker={clearDatePicker}\r\n                    closeDropdown={\r\n                        canDropdownBeClosed ? handleDropdownClose : null\r\n                    }\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nModalDate.propTypes = {\r\n    handleModalRuleChange: PropTypes.func.isRequired,\r\n    isAnyModalOpen: PropTypes.bool.isRequired,\r\n    updateFilterValues: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ModalDate;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './secondary-button.styles.scss';\r\n\r\n/**\r\n * Component used as secondary button\r\n *\r\n * @param {string} text text rendered inside button\r\n * @param {function} buttonFunction function to be called on button click\r\n * @param {boolean} isDisabled defines whether button is disabled or not\r\n *\r\n * @return  {FC} SecondaryButton component\r\n *\r\n * @component\r\n * @example\r\n * const text = 'Filter'\r\n * const buttonFunction = () => {}\r\n * const isDisabled = false\r\n *\r\n * return (\r\n *    <SecondaryButton text={text} buttonFunction={buttonFunction} isDisabled={isDisabled} />\r\n * )\r\n *\r\n */\r\n\r\nconst SecondaryButton = ({ text, buttonFunction, isDisabled }) => {\r\n    return (\r\n        <button\r\n            onClick={buttonFunction}\r\n            type=\"button\"\r\n            className=\"secondary-button\"\r\n            disabled={isDisabled}\r\n        >\r\n            {text}\r\n        </button>\r\n    );\r\n};\r\n\r\nSecondaryButton.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    buttonFunction: PropTypes.func,\r\n    isDisabled: PropTypes.bool,\r\n};\r\n\r\nSecondaryButton.defaultProps = {\r\n    buttonFunction: () => {},\r\n    isDisabled: false,\r\n};\r\n\r\nSecondaryButton.defaultProps = {};\r\n\r\nexport default SecondaryButton;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ModalMultiselect from './modal-multiselect/modal-multiselect.component';\r\nimport ModalDate from './modal-date/modal-date.component';\r\nimport SecondaryButton from '../../shared/buttons/secondary-button/secondary-button.component';\r\nimport { MULTISELECTABLE_OPTIONS } from '../../../mock-data/mock.data';\r\nimport { EMPLOYEE_PROPTYPES } from '../helpers';\r\nimport './modal.styles.scss';\r\n\r\n/**\r\n * Component used as modal with dropdown used to filter and select employees\r\n *\r\n * @param {function} updateFilterValues function used to update values of filters\r\n * @param {function} handleTableDisplay function used to handle table display in app\r\n * @param {Object[]} filtredRecords array of filtred records\r\n * @param {boolean} isEmployeeSelected informs if any employee is selected from dropdown\r\n * @param {boolean} areFiltersEmpty informs if filters are empty\r\n * @param {function} modalCloseFunction function used to close open modal\r\n *\r\n * @return  {FC} Modal component\r\n *\r\n * @component\r\n * @example\r\n * const updateFilterValues = () => {}\r\n * const handleTableDisplay = () => {}\r\n * const filtredRecords = []\r\n * const isEmployeeSelected = false\r\n * const areFiltersEmpty = false\r\n * const modalCloseFunction = () => {}\r\n *\r\n * return (\r\n *    <Modal\r\n *      updateFilterValues={updateFilterValues}\r\n *      handleTableDisplay={handleTableDisplay}\r\n *      filtredRecords={filtredRecords}\r\n *      isEmployeeSelected={isEmployeeSelected}\r\n *      areFiltersEmpty={areFiltersEmpty}\r\n *      modalCloseFunction={modalCloseFunction}\r\n *    />\r\n * )\r\n *\r\n */\r\n\r\nconst Modal = ({\r\n    updateFilterValues,\r\n    handleTableDisplay,\r\n    filtredRecords,\r\n    isEmployeeSelected,\r\n    areFiltersEmpty,\r\n    modalCloseFunction,\r\n}) => {\r\n    const [isAnyModalOpen, setIsAnyModalOpen] = useState(false);\r\n\r\n    const handleModalRuleChange = (rule) => {\r\n        setIsAnyModalOpen(rule);\r\n    };\r\n    return (\r\n        <div className=\"modal\">\r\n            <button\r\n                onClick={modalCloseFunction}\r\n                className=\"modal__close-button\"\r\n                type=\"button\"\r\n            >\r\n                x\r\n            </button>\r\n            <h2 className=\"modal__heading\">Wybierz pracowników</h2>\r\n\r\n            <div className=\"modal__select-container\">\r\n                <ModalDate\r\n                    handleModalRuleChange={handleModalRuleChange}\r\n                    isAnyModalOpen={isAnyModalOpen}\r\n                    updateFilterValues={updateFilterValues}\r\n                />\r\n\r\n                {MULTISELECTABLE_OPTIONS.map(\r\n                    ({ title, options, filterKey }) => (\r\n                        <ModalMultiselect\r\n                            title={title}\r\n                            options={options}\r\n                            handleModalRuleChange={handleModalRuleChange}\r\n                            isAnyModalOpen={isAnyModalOpen}\r\n                            updateFilterValues={updateFilterValues}\r\n                            filterKey={filterKey}\r\n                            areFiltersEmpty={areFiltersEmpty}\r\n                            filtredRecords={filtredRecords}\r\n                            key={filterKey}\r\n                        />\r\n                    )\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"modal__button-container\">\r\n                <SecondaryButton\r\n                    text=\"WYŚWIETL\"\r\n                    buttonFunction={handleTableDisplay}\r\n                    isDisabled={!isEmployeeSelected}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nModal.propTypes = {\r\n    updateFilterValues: PropTypes.func.isRequired,\r\n    handleTableDisplay: PropTypes.func.isRequired,\r\n    filtredRecords: PropTypes.arrayOf(EMPLOYEE_PROPTYPES).isRequired,\r\n    isEmployeeSelected: PropTypes.bool.isRequired,\r\n    areFiltersEmpty: PropTypes.bool.isRequired,\r\n    modalCloseFunction: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    formatDateToString,\r\n    formatStringsFromArr,\r\n    SEARCH_FILTERS_PROPTYPES,\r\n} from '../helpers';\r\nimport './filters-info.styles.scss';\r\n\r\n/**\r\n * Component used as information of used filters in search\r\n *\r\n * @param {Object} searchFilters object with avaliable filters\r\n * @param {Object} searchFilters.date object with start and end date of search\r\n * @param {date} searchFilters.date.startDate start date of search\r\n * @param {date} searchFilters.date.endDate end date of search\r\n * @param {String[]} searchFilters.jobs array of job types search filters\r\n * @param {String[]} searchFilters.locations array of locations search filters\r\n * @param {String[]} searchFilters.agreements array of agreements types search filters\r\n * @param {boolean} isOpen decides if filter infos should be visible\r\n *\r\n * @return  {FC} FiltersInfo component\r\n *\r\n * @component\r\n * @example\r\n * const searchFilters = {\r\n *                          date: {\r\n *                               startDate: new Date(),\r\n *                               endDate: new Date(),\r\n *                          },\r\n *                          jobs: ['cook','waiter'],\r\n *                          locations: ['loc1', 'loc2'],\r\n *                          agreements: []\r\n *                       }\r\n * const isOpen = true;\r\n *\r\n * return (\r\n *    <FiltersInfo\r\n *      searchFilters={searchFilters}\r\n *      isOpen={isOpen}\r\n *    />\r\n * )\r\n *\r\n */\r\n\r\nconst FiltersInfo = ({ searchFilters, isOpen }) => {\r\n    const {\r\n        date: { startDate, endDate },\r\n        jobs,\r\n        locations,\r\n        agreements,\r\n    } = searchFilters;\r\n\r\n    return (\r\n        <div\r\n            className={`filters-info filters-info--${\r\n                isOpen ? 'open' : 'closed'\r\n            }`}\r\n        >\r\n            <p className=\"filters-info__title\">Użyto następujących filtrów:</p>\r\n            <p>\r\n                <strong>Data początkowa:</strong>{' '}\r\n                {formatDateToString(startDate)}\r\n            </p>\r\n            <p>\r\n                <strong>Data końcowa:</strong> {formatDateToString(endDate)}\r\n            </p>\r\n            <p>\r\n                <strong>Stanowiska:</strong> {formatStringsFromArr(jobs)}\r\n            </p>\r\n            <p>\r\n                <strong>Lokalizacje:</strong> {formatStringsFromArr(locations)}\r\n            </p>\r\n            <p>\r\n                <strong>Typ zatrudnienia:</strong>{' '}\r\n                {formatStringsFromArr(agreements)}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nFiltersInfo.propTypes = {\r\n    searchFilters: SEARCH_FILTERS_PROPTYPES.isRequired,\r\n    isOpen: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default FiltersInfo;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PrimaryButton from '../shared/buttons/primary-button/primary-button.component';\r\nimport TextInput from './inputs/text-input/text-input.component';\r\nimport Table from './table/table.component';\r\nimport Modal from './modal/modal.component';\r\nimport Backdrop from '../shared/backdrop/backdrop.component';\r\nimport FiltersInfo from './filters-info/filters-info.component';\r\nimport {\r\n    EMPLOYEES,\r\n    INITIAL_FILTERS,\r\n    JOB_FILTERS,\r\n} from '../../mock-data/mock.data';\r\nimport { filterName, filterThroughFilters } from './helpers';\r\nimport './main.styles.scss';\r\n\r\n/**\r\n * Component used as main section of application with searchers, modal and results table\r\n *\r\n * @return  {FC} Main component\r\n *\r\n * @component\r\n * @example\r\n *\r\n * return (\r\n *    <Main />\r\n * )\r\n *\r\n */\r\n\r\nconst Main = () => {\r\n    const [isFiltersModalOpen, setIsFiltersModalOpen] = useState(false);\r\n    const [isTableVisible, setIsTableVisible] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isFiltersInfoOpen, setIsFiltersInfoOpen] = useState(false);\r\n    const [nameSearchValue, setNameSearchValue] = useState('');\r\n    const [searchFilters, setSearchFilters] = useState(INITIAL_FILTERS);\r\n    const [filtredRecords, setFiltredRecords] = useState([]);\r\n    const [tableData, setTableData] = useState([]);\r\n\r\n    // component handlers\r\n\r\n    // component handlers - modal\r\n    const openFiltersModal = () => {\r\n        setIsFiltersModalOpen(true);\r\n    };\r\n\r\n    const closeFiltersModal = () => {\r\n        setIsFiltersModalOpen(false);\r\n    };\r\n\r\n    // component handlers - table\r\n    const displayTable = () => {\r\n        setIsLoading(true);\r\n\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n            setIsTableVisible(true);\r\n        }, 1000);\r\n    };\r\n\r\n    const hideTable = () => {\r\n        setIsTableVisible(false);\r\n    };\r\n\r\n    // modal handlers\r\n\r\n    const startFilters = () => {\r\n        setNameSearchValue('');\r\n        openFiltersModal();\r\n    };\r\n\r\n    const handleTableDisplay = () => {\r\n        setTableData(searchFilters.employees);\r\n        closeFiltersModal();\r\n        displayTable();\r\n    };\r\n\r\n    // name search handlers\r\n\r\n    const handeNameSearchChange = ({ target: { value } }) => {\r\n        setNameSearchValue(value);\r\n    };\r\n\r\n    const handleNameSearchKeyPress = ({ key }) => {\r\n        if (key === 'Enter') {\r\n            displayTable();\r\n        }\r\n    };\r\n\r\n    // filters change handlers\r\n\r\n    const updateFilterValues = (filterKey, value) => {\r\n        setSearchFilters({ ...searchFilters, [filterKey]: value });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTableData(filterName(nameSearchValue, EMPLOYEES));\r\n    }, [nameSearchValue]);\r\n\r\n    useEffect(() => {\r\n        setFiltredRecords(filterThroughFilters(searchFilters, EMPLOYEES));\r\n    }, [searchFilters]);\r\n\r\n    const { employees, ...basicFilters } = searchFilters;\r\n\r\n    const areFiltersEmpty =\r\n        JSON.stringify(basicFilters) === JSON.stringify(JOB_FILTERS);\r\n\r\n    // filters info handler\r\n\r\n    const openFilterInfo = () => {\r\n        setIsFiltersInfoOpen(true);\r\n    };\r\n\r\n    const closeFilterInfo = () => {\r\n        setIsFiltersInfoOpen(false);\r\n    };\r\n\r\n    // reset handler\r\n\r\n    const resetToInitialState = () => {\r\n        hideTable();\r\n        setNameSearchValue('');\r\n        setSearchFilters(INITIAL_FILTERS);\r\n        setFiltredRecords([]);\r\n        setTableData(EMPLOYEES);\r\n    };\r\n\r\n    return (\r\n        <article className=\"main\">\r\n            {!isTableVisible ? (\r\n                <section className=\"main__section-search\">\r\n                    <div className=\"main__input-container\">\r\n                        <TextInput\r\n                            placeholder=\"Wyszukaj po imieniu i nazwisku...\"\r\n                            handeNameSearchChange={handeNameSearchChange}\r\n                            handleKeyPress={handleNameSearchKeyPress}\r\n                        />\r\n                    </div>\r\n                    <div className=\"main__buttons-container\">\r\n                        <PrimaryButton\r\n                            text=\"SZUKAJ\"\r\n                            buttonFunction={displayTable}\r\n                        />\r\n                        <PrimaryButton\r\n                            text=\"FILTRUJ\"\r\n                            buttonFunction={startFilters}\r\n                        />\r\n                    </div>\r\n                </section>\r\n            ) : (\r\n                <section\r\n                    onClick={isFiltersInfoOpen ? closeFilterInfo : null}\r\n                    className=\"main__section-table\"\r\n                >\r\n                    <Table data={tableData} />\r\n                    <div className=\"main__filters-info-container\">\r\n                        <FiltersInfo\r\n                            searchFilters={searchFilters}\r\n                            isOpen={isFiltersInfoOpen}\r\n                        />\r\n                        <PrimaryButton\r\n                            text=\"PONÓW\"\r\n                            buttonFunction={resetToInitialState}\r\n                        />\r\n                        <PrimaryButton\r\n                            text=\"FILTRY\"\r\n                            buttonFunction={openFilterInfo}\r\n                            customCSSClass=\"primary-button--filters\"\r\n                        />\r\n                    </div>\r\n                </section>\r\n            )}\r\n\r\n            {isFiltersModalOpen && (\r\n                <section>\r\n                    <Modal\r\n                        updateFilterValues={updateFilterValues}\r\n                        handleTableDisplay={handleTableDisplay}\r\n                        filtredRecords={filtredRecords}\r\n                        isEmployeeSelected={!!searchFilters.employees.length}\r\n                        areFiltersEmpty={areFiltersEmpty}\r\n                        modalCloseFunction={closeFiltersModal}\r\n                    />\r\n                    <Backdrop />\r\n                </section>\r\n            )}\r\n\r\n            {isLoading && <Backdrop>Wczytywanie...</Backdrop>}\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Navigation from './components/navigation/navigation.component';\nimport Main from './components/main/main.component';\nimport './App.scss';\n\nconst App = () => {\n    return (\n        <div className=\"app\">\n            <Navigation />\n            <Main />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}