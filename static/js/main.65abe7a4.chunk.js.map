{"version":3,"sources":["components/navigation/toggle-button/toggle-button.component.jsx","components/shared/backdrop/backdrop.component.jsx","mock-data/mock.data.js","components/shared/icon/icon.component.jsx","components/navigation/navbar/navbar.component.jsx","components/navigation/navigation.component.jsx","components/shared/buttons/primary-button/primary-button.component.jsx","components/main/inputs/text-input/text-input.component.jsx","components/main/table/table-row/table-row-head/table-row-head.component.jsx","components/main/table/table-head/table-head.component.jsx","components/main/helpers.js","components/main/table/table-row/table-row-body/table-row-body.component.jsx","components/main/table/table-body/table-body.component.jsx","components/main/table/table-foot/table-foot.component.jsx","components/main/table/table.component.jsx","components/main/inputs/checkbox/checkbox.component.jsx","components/main/inputs/multiselect-dropdown/multiselect-dropdown.component.jsx","components/main/modal/modal-multiselect/modal-multiselect.component.jsx","components/main/inputs/date-picker/helpers.js","components/main/inputs/date-picker/date-picker.context.js","components/main/inputs/date-picker/date-picker-day/date-picker-day.component.jsx","components/main/inputs/date-picker/date-picker-month/date-picker-month.component.jsx","components/main/inputs/date-picker/date-picker-nav/date-picker-nav.component.jsx","components/main/inputs/date-picker/date-picker-handler/date-picker-handler.component.jsx","components/main/inputs/date-picker/date-picker.component.jsx","components/main/modal/modal-date/modal-date.component.jsx","components/shared/buttons/secondary-button/secondary-button.component.jsx","components/main/modal/modal.component.jsx","components/main/filters-info/filters-info.component.jsx","components/main/main.component.jsx","App.jsx","index.js"],"names":["ToggleButton","openNavbar","onClick","className","type","Backdrop","closeFunction","children","defaultProps","ICONS_NAMES","AGREEMENT_TYPES","PERNAMENT","PERIOD","TASK","AGREEMENT_OPTIONS","Object","values","JOB_TYPES","COOK","WAITER","CLEANER","HELP","SERVICE","JOB_OPTIONS","LOCATIONS","ARKADY","PASAZ","BIELANY","LOCATIONS_OPTIONS","EMPLOYEES_HEADERS","INITIAL_FILTERS","date","startDate","endDate","jobs","locations","agreements","employees","JOB_FILTERS","NAVIGATION_ICONS","ICON_NAME","TEXT","EMPLOYEES","id","name","Date","job","agreement","MULTISELECTABLE_OPTIONS","title","options","filterKey","Icon","iconName","customCSSClass","BOOK","CHART","PHONE","ENVELOPE","INFO","SEARCH","SORT","CALENDAR","NEXT","PREVIOUS","icon","faAddressBook","faChartBar","faPhoneSquareAlt","faEnvelope","faInfoCircle","faSearch","faSortDown","faCalendarAlt","faChevronCircleRight","faChevronCircleLeft","getIcon","Navbar","isNavbarOpen","map","key","Navigation","useState","setIsNavbarOpen","PrimaryButton","text","buttonFunction","TextInput","placeholder","isDropdown","handeNameSearchChange","handleKeyPress","undefined","onChange","onKeyPress","TableRowHead","data","heading","index","TableHead","getWindowWidth","window","innerWidth","filterName","searchName","arr","filter","element","elementName","toLowerCase","includes","formatDateToString","fullDate","day","getDay","month","getMonth","year","getFullYear","EMPLOYEE_PROPTYPES","PropTypes","shape","number","isRequired","string","instanceOf","arrayOf","TableRowBody","oneOfType","oneOf","loc","length","TableBody","isValid","employee","TableFoot","recordsNumber","Table","dataLength","Checkbox","isChecked","event","preventDefault","toggleCheckbox","role","tabIndex","htmlFor","MultiselectDropdown","selectOptions","filtredRecords","selectedOptions","setSelectedOptions","isEmployeesMultiselect","areFiltersEmpty","searchValue","setSearchValue","filtredOptions","setFiltredOptions","useEffect","listHeight","listFixedHeight","ELEMENT_HEIGHT","dropdownHeight","filtredOptionsLength","areOptionsEqual","JSON","stringify","style","height","value","target","el","indexOf","updatedOptions","splice","handleSingleOptionSelect","ModalMultiselect","handleModalRuleChange","isAnyModalOpen","updateFilterValues","isDropdownOpen","setIsDropdownOpen","isWindowWidthValid","windowWidth","setWindowWidth","handleWindowWithChange","addEventListener","removeEventListener","useWindowWidth","isSelectedOptionInFiltredRecords","every","val","getOptionName","option","selectedOptionsLength","validateEmployees","firstOption","validWidthMultipleOptions","getInputValue","enPlMonths","January","February","March","April","May","June","July","August","September","October","November","December","React","createContext","focusedDate","isDateFocused","isDateSelected","isDateHovered","isDateBlocked","isFirstOrLastSelectedDate","onDateFocus","onDateHover","onDateSelect","COLORS","PickerDay","dayLabel","contextValues","useContext","DatepickerContext","useDay","isSelected","isSelectedStartOrEnd","getTrueColor","selectedFirstOrLastColor","normalColor","selectedColor","getColors","color","background","WEEK_DAYS_LABELS","PickerMonth","firstDayOfWeek","useMonth","days","monthLabel","label","splitedDate","split","convertedMonth","convertMonthLabelToPl","toString","PickerNavButton","PickerHandler","clickFunction","DatePicker","pickerState","focusedInput","handleDateChange","closeDropdown","clearDatePicker","useDatepicker","onDatesChange","activeMonths","goToPreviousMonthsByOneMonth","goToNextMonthsByOneMonth","currentMonth","currentYear","validateNavigation","fnc","Provider","INITIAL_PICKER_STATE","START_DATE","ModalDate","setPickerState","handleDropdownClose","formatDateToDMString","getDate","inputValue","canDropdownBeClosed","SecondaryButton","isDisabled","disabled","Modal","handleTableDisplay","isEmployeeSelected","modalCloseFunction","setIsAnyModalOpen","rule","FiltersInfo","searchFilters","formatArrayToString","Main","isFiltersModalOpen","setIsFiltersModalOpen","isTableVisible","setIsTableVisible","isLoading","setIsLoading","nameSearchValue","setNameSearchValue","setSearchFilters","setFiltredRecords","tableData","setTableData","closeFiltersModal","displayTable","setTimeout","filters","some","filterThroughFilters","basicFilters","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65abe7a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './toggle-button.styles.scss';\r\n\r\nconst ToggleButton = ({ openNavbar }) => (\r\n    <button onClick={openNavbar} className=\"toggle-button\" type=\"button\">\r\n        <div className=\"toggle-button__line\" />\r\n        <div className=\"toggle-button__line\" />\r\n        <div className=\"toggle-button__line\" />\r\n    </button>\r\n);\r\n\r\nToggleButton.propTypes = {\r\n    openNavbar: PropTypes.func.isRequired,\r\n};\r\nexport default ToggleButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './backdrop.styles.scss';\r\n\r\nconst Backdrop = ({ closeFunction, children }) => (\r\n    <div className=\"backdrop\" onClick={closeFunction}>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nBackdrop.propTypes = {\r\n    closeFunction: PropTypes.func,\r\n    children: PropTypes.string,\r\n};\r\n\r\nBackdrop.defaultProps = {\r\n    closeFunction: () => {},\r\n    children: '',\r\n};\r\n\r\nexport default Backdrop;\r\n","export const ICONS_NAMES = {\r\n    BOOK: 'book',\r\n    CHART: 'chart',\r\n    PHONE: 'phone',\r\n    ENVELOPE: 'envelope',\r\n    INFO: 'info',\r\n    SEARCH: 'search',\r\n    SORT: 'sort',\r\n    CALENDAR: 'calendar',\r\n    NEXT: 'next',\r\n    PREVIOUS: 'previous',\r\n};\r\n\r\nexport const AGREEMENT_TYPES = {\r\n    PERNAMENT: 'Umowa o pracę',\r\n    PERIOD: 'Umowa zlecenie',\r\n    TASK: 'Umowa o dzieło',\r\n};\r\n\r\nexport const AGREEMENT_OPTIONS = Object.values(AGREEMENT_TYPES);\r\n\r\nexport const JOB_TYPES = {\r\n    COOK: 'Kucharz',\r\n    WAITER: 'Kelner',\r\n    CLEANER: 'Konserwator',\r\n    HELP: 'Pomoc kuchenna',\r\n    SERVICE: 'Serwisant',\r\n};\r\n\r\nexport const JOB_OPTIONS = Object.values(JOB_TYPES);\r\n\r\nexport const LOCATIONS = {\r\n    ARKADY: 'Arkady',\r\n    PASAZ: 'Pasaż Grunwaldzki',\r\n    BIELANY: 'Aleja Bielany',\r\n};\r\n\r\nexport const LOCATIONS_OPTIONS = Object.values(LOCATIONS);\r\n\r\nexport const EMPLOYEES_HEADERS = [\r\n    'Imię i nazwisko',\r\n    'Data',\r\n    'Stanowisko',\r\n    'Warunki zatrudnienia',\r\n    'Lokalizacje',\r\n];\r\n\r\nexport const INITIAL_FILTERS = {\r\n    date: {\r\n        startDate: null,\r\n        endDate: null,\r\n    },\r\n    jobs: [],\r\n    locations: [],\r\n    agreements: [],\r\n    employees: [],\r\n};\r\n\r\nexport const JOB_FILTERS = {\r\n    date: {\r\n        startDate: null,\r\n        endDate: null,\r\n    },\r\n    jobs: [],\r\n    locations: [],\r\n    agreements: [],\r\n};\r\n\r\nexport const NAVIGATION_ICONS = [\r\n    {\r\n        ICON_NAME: 'book',\r\n        TEXT: 'Pracownicy',\r\n    },\r\n    {\r\n        ICON_NAME: 'chart',\r\n        TEXT: 'Analiza',\r\n    },\r\n    {\r\n        ICON_NAME: 'phone',\r\n        TEXT: 'Kontakty',\r\n    },\r\n    {\r\n        ICON_NAME: 'envelope',\r\n        TEXT: 'Wiadomości',\r\n    },\r\n];\r\n\r\nexport const EMPLOYEES = [\r\n    {\r\n        id: 1,\r\n        name: 'Adam Adamski',\r\n        date: new Date(2020, 0, 1),\r\n        job: JOB_TYPES.COOK,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Bernadeta Bednarska',\r\n        date: new Date(2020, 1, 2),\r\n        job: JOB_TYPES.WAITER,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Cecylia Cedyńska',\r\n        date: new Date(2020, 2, 3),\r\n        job: JOB_TYPES.CLEANER,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Denis Dembski',\r\n        date: new Date(2020, 3, 4),\r\n        job: JOB_TYPES.HELP,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Ernest Etstkowski',\r\n        date: new Date(2020, 4, 5),\r\n        job: JOB_TYPES.SERVICE,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Franciszek Fretka',\r\n        date: new Date(2020, 5, 6),\r\n        job: JOB_TYPES.COOK,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Grażyna Gasiuk',\r\n        date: new Date(2020, 6, 7),\r\n        job: JOB_TYPES.WAITER,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Henryk Henrykowski',\r\n        date: new Date(2020, 7, 8),\r\n        job: JOB_TYPES.CLEANER,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Irena Isierska',\r\n        date: new Date(2020, 8, 9),\r\n        job: JOB_TYPES.HELP,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Jakub Jędrzychowski',\r\n        date: new Date(2020, 9, 10),\r\n        job: JOB_TYPES.SERVICE,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'Katarzyna Katarska',\r\n        date: new Date(2020, 10, 11),\r\n        job: JOB_TYPES.COOK,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 12,\r\n        name: 'Lucjan Lukrowicz',\r\n        date: new Date(2020, 11, 12),\r\n        job: JOB_TYPES.WAITER,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 13,\r\n        name: 'Mikołaj Miłosławski',\r\n        date: new Date(2020, 0, 13),\r\n        job: JOB_TYPES.CLEANER,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 14,\r\n        name: 'Nicol Niżna',\r\n        date: new Date(2020, 1, 14),\r\n        job: JOB_TYPES.HELP,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 15,\r\n        name: 'Oskar Oparski',\r\n        date: new Date(2020, 2, 15),\r\n        job: JOB_TYPES.SERVICE,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 16,\r\n        name: 'Patryk Przybylski',\r\n        date: new Date(2020, 3, 16),\r\n        job: JOB_TYPES.COOK,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 17,\r\n        name: 'Roksana Rusiecka',\r\n        date: new Date(2020, 4, 17),\r\n        job: JOB_TYPES.WAITER,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 18,\r\n        name: 'Sabina Sadowska',\r\n        date: new Date(2020, 5, 18),\r\n        job: JOB_TYPES.CLEANER,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 19,\r\n        name: 'Tomasz Tokarz',\r\n        date: new Date(2020, 6, 19),\r\n        job: JOB_TYPES.HELP,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 20,\r\n        name: 'Urszula Uniejska',\r\n        date: new Date(2020, 7, 20),\r\n        job: JOB_TYPES.SERVICE,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 21,\r\n        name: 'Waldemar Wolski',\r\n        date: new Date(2020, 8, 21),\r\n        job: JOB_TYPES.COOK,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n    {\r\n        id: 22,\r\n        name: 'Zofia Zamojska',\r\n        date: new Date(2020, 9, 22),\r\n        job: JOB_TYPES.WAITER,\r\n        agreement: AGREEMENT_TYPES.PERNAMENT,\r\n        locations: [LOCATIONS.ARKADY],\r\n    },\r\n    {\r\n        id: 23,\r\n        name: 'Adrianna Adamska',\r\n        date: new Date(2020, 10, 23),\r\n        job: JOB_TYPES.CLEANER,\r\n        agreement: AGREEMENT_TYPES.PERIOD,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ],\r\n    },\r\n    {\r\n        id: 24,\r\n        name: 'Tomasz Adamski',\r\n        date: new Date(2020, 11, 24),\r\n        job: JOB_TYPES.HELP,\r\n        agreement: AGREEMENT_TYPES.TASK,\r\n        locations: [LOCATIONS.ARKADY, LOCATIONS.PASAZ, LOCATIONS.BIELANY],\r\n    },\r\n];\r\n\r\nexport const MULTISELECTABLE_OPTIONS = [\r\n    {\r\n        title: 'Stanowiska',\r\n        options: JOB_OPTIONS,\r\n        filterKey: 'jobs',\r\n    },\r\n    {\r\n        title: 'Lokalizacje',\r\n        options: LOCATIONS_OPTIONS,\r\n        filterKey: 'locations',\r\n    },\r\n    {\r\n        title: 'Pracownicy',\r\n        options: EMPLOYEES,\r\n        filterKey: 'employees',\r\n    },\r\n    {\r\n        title: 'Warunki zatrudnienia',\r\n        options: AGREEMENT_OPTIONS,\r\n        filterKey: 'agreements',\r\n    },\r\n];\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faAddressBook,\r\n    faChartBar,\r\n    faPhoneSquareAlt,\r\n    faEnvelope,\r\n    faInfoCircle,\r\n    faSearch,\r\n    faSortDown,\r\n    faCalendarAlt,\r\n    faChevronCircleRight,\r\n    faChevronCircleLeft,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { ICONS_NAMES } from '../../../mock-data/mock.data';\r\nimport './icon.styles.scss';\r\n\r\nconst Icon = ({ iconName, customCSSClass }) => {\r\n    const {\r\n        BOOK,\r\n        CHART,\r\n        PHONE,\r\n        ENVELOPE,\r\n        INFO,\r\n        SEARCH,\r\n        SORT,\r\n        CALENDAR,\r\n        NEXT,\r\n        PREVIOUS,\r\n    } = ICONS_NAMES;\r\n\r\n    const getIcon = (icon) => {\r\n        switch (icon) {\r\n            case BOOK:\r\n                return faAddressBook;\r\n            case CHART:\r\n                return faChartBar;\r\n            case PHONE:\r\n                return faPhoneSquareAlt;\r\n            case ENVELOPE:\r\n                return faEnvelope;\r\n            case INFO:\r\n                return faInfoCircle;\r\n            case SEARCH:\r\n                return faSearch;\r\n            case SORT:\r\n                return faSortDown;\r\n            case CALENDAR:\r\n                return faCalendarAlt;\r\n            case NEXT:\r\n                return faChevronCircleRight;\r\n            case PREVIOUS:\r\n                return faChevronCircleLeft;\r\n            default:\r\n                return faInfoCircle;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FontAwesomeIcon\r\n            icon={getIcon(iconName)}\r\n            className={customCSSClass ? `icon--${customCSSClass}` : 'icon'}\r\n        />\r\n    );\r\n};\r\n\r\nIcon.propTypes = {\r\n    iconName: PropTypes.string,\r\n    customCSSClass: PropTypes.string,\r\n};\r\n\r\nIcon.defaultProps = {\r\n    iconName: '',\r\n    customCSSClass: '',\r\n};\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from '../../shared/icon/icon.component';\r\nimport { NAVIGATION_ICONS } from '../../../mock-data/mock.data';\r\nimport './navbar.styles.scss';\r\n\r\nconst Navbar = ({ isNavbarOpen }) => (\r\n    <nav className={`navbar ${isNavbarOpen && 'navbar--open'}`}>\r\n        <ul className=\"navbar__list\">\r\n            {NAVIGATION_ICONS.map(({ ICON_NAME, TEXT }) => (\r\n                <li className=\"navbar__item\" key={ICON_NAME}>\r\n                    <Icon iconName={ICON_NAME} />\r\n                    <span>{TEXT}</span>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nNavbar.propTypes = {\r\n    isNavbarOpen: PropTypes.bool.isRequired,\r\n};\r\nexport default Navbar;\r\n","import React, { useState } from 'react';\r\nimport ToggleButton from './toggle-button/toggle-button.component';\r\nimport Backdrop from '../shared/backdrop/backdrop.component';\r\nimport Navbar from './navbar/navbar.component';\r\nimport './navigation.styles.scss';\r\n\r\nconst Navigation = () => {\r\n    const [isNavbarOpen, setIsNavbarOpen] = useState(false);\r\n\r\n    const openNavbar = () => {\r\n        setIsNavbarOpen(true);\r\n    };\r\n\r\n    const closeNavbar = () => {\r\n        setIsNavbarOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ToggleButton openNavbar={openNavbar} />\r\n            <Navbar isNavbarOpen={isNavbarOpen} />\r\n            {isNavbarOpen && <Backdrop closeFunction={closeNavbar} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './primary-button.styles.scss';\r\n\r\nconst PrimaryButton = ({ text, buttonFunction }) => {\r\n    return (\r\n        <button\r\n            onClick={buttonFunction}\r\n            type=\"button\"\r\n            className=\"primary-button\"\r\n        >\r\n            {text}\r\n        </button>\r\n    );\r\n};\r\n\r\nPrimaryButton.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    buttonFunction: PropTypes.func,\r\n};\r\n\r\nPrimaryButton.defaultProps = {\r\n    buttonFunction: () => {},\r\n};\r\n\r\nexport default PrimaryButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from '../../../shared/icon/icon.component';\r\nimport { ICONS_NAMES } from '../../../../mock-data/mock.data';\r\nimport './text-input.styles.scss';\r\n\r\nconst TextInput = ({\r\n    placeholder,\r\n    isDropdown,\r\n    handeNameSearchChange,\r\n    handleKeyPress,\r\n}) => (\r\n    <div className={isDropdown ? 'text-input--container' : undefined}>\r\n        {isDropdown && (\r\n            <Icon\r\n                iconName={ICONS_NAMES.SEARCH}\r\n                customCSSClass={ICONS_NAMES.SEARCH}\r\n            />\r\n        )}\r\n        <input\r\n            type=\"text\"\r\n            placeholder={placeholder}\r\n            className={isDropdown ? 'text-input--dropdown' : 'text-input'}\r\n            onChange={handeNameSearchChange}\r\n            onKeyPress={handleKeyPress}\r\n        />\r\n    </div>\r\n);\r\n\r\nTextInput.propTypes = {\r\n    placeholder: PropTypes.string.isRequired,\r\n    isDropdown: PropTypes.bool,\r\n    handeNameSearchChange: PropTypes.func,\r\n    handleKeyPress: PropTypes.func,\r\n};\r\n\r\nTextInput.defaultProps = {\r\n    isDropdown: false,\r\n    handeNameSearchChange: () => {},\r\n    handleKeyPress: () => {},\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './table-row-head.styles.scss';\r\n\r\nconst TableRowHead = ({ data }) => (\r\n    <tr className=\"table-row-head\">\r\n        <>\r\n            {data.map((heading, index) => (\r\n                <th\r\n                    className={\r\n                        index > 0 ? `table-row-head__cell--high` : undefined\r\n                    }\r\n                    key={heading}\r\n                >\r\n                    {heading}\r\n                </th>\r\n            ))}\r\n\r\n            <th className=\"table-row-head__cell--low\">Szczegóły</th>\r\n        </>\r\n    </tr>\r\n);\r\n\r\nTableRowHead.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n};\r\n\r\nexport default TableRowHead;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TableRowHead from '../table-row/table-row-head/table-row-head.component';\r\nimport './table-head.styles.scss';\r\n\r\nconst TableHead = ({ data }) => (\r\n    <thead className=\"table-head\">\r\n        <TableRowHead data={data} />\r\n    </thead>\r\n);\r\n\r\nTableHead.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default TableHead;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// window width hook\r\n\r\nconst getWindowWidth = () => window.innerWidth;\r\n\r\nexport const useWindowWidth = () => {\r\n    const [windowWidth, setWindowWidth] = useState(getWindowWidth());\r\n\r\n    useEffect(() => {\r\n        const handleWindowWithChange = () => {\r\n            setWindowWidth(getWindowWidth());\r\n        };\r\n        window.addEventListener('resize', handleWindowWithChange);\r\n\r\n        return () =>\r\n            window.removeEventListener('resize', handleWindowWithChange);\r\n    }, []);\r\n\r\n    return windowWidth;\r\n};\r\n\r\n// filters\r\n\r\nexport const filterName = (searchName, arr) =>\r\n    arr.filter((element) => {\r\n        const elementName =\r\n            typeof element === 'string' ? element : element.name;\r\n        return searchName\r\n            ? elementName.toLowerCase().includes(searchName.toLowerCase())\r\n            : element;\r\n    });\r\n\r\nexport const filterThroughFilters = (filters, arr) => {\r\n    const {\r\n        date: { startDate, endDate },\r\n        jobs,\r\n        locations,\r\n        agreements,\r\n    } = filters;\r\n\r\n    const filterStartDate = (element) =>\r\n        startDate ? element.date >= startDate : element;\r\n    const filterEndDate = (element) =>\r\n        endDate ? element.date <= endDate : element;\r\n\r\n    const filterJobs = (element) =>\r\n        jobs.length ? jobs.includes(element.job) : element;\r\n\r\n    const filterLocations = (element) =>\r\n        locations.length\r\n            ? locations.some((loc) => element.locations.includes(loc))\r\n            : element;\r\n\r\n    const filterAgreements = (element) =>\r\n        agreements.length ? agreements.includes(element.agreement) : element;\r\n\r\n    return arr\r\n        .filter(filterStartDate)\r\n        .filter(filterEndDate)\r\n        .filter(filterJobs)\r\n        .filter(filterLocations)\r\n        .filter(filterAgreements);\r\n};\r\n\r\nexport const formatDateToString = (fullDate) => {\r\n    if (fullDate instanceof Date) {\r\n        const day = fullDate.getDay();\r\n        const month = fullDate.getMonth() + 1;\r\n        const year = fullDate.getFullYear();\r\n\r\n        return `${day}/${month < 10 ? `0${month}` : month}/${year}`;\r\n    }\r\n    return '-';\r\n};\r\n\r\n// proptypes\r\n\r\nexport const EMPLOYEE_PROPTYPES = PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    date: PropTypes.instanceOf(Date).isRequired,\r\n    job: PropTypes.string.isRequired,\r\n    agreement: PropTypes.string.isRequired,\r\n    locations: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n});\r\n\r\nexport const SEARCH_FILTERS_PROPTYPES = PropTypes.shape({\r\n    date: PropTypes.shape({\r\n        startDate: PropTypes.oneOfType([\r\n            PropTypes.instanceOf(Date),\r\n            PropTypes.oneOf([null]),\r\n        ]),\r\n        endDate: PropTypes.oneOfType([\r\n            PropTypes.instanceOf(Date),\r\n            PropTypes.oneOf([null]),\r\n        ]),\r\n    }),\r\n    jobs: PropTypes.arrayOf(PropTypes.string),\r\n    locations: PropTypes.arrayOf(PropTypes.string),\r\n    agreements: PropTypes.arrayOf(PropTypes.string),\r\n    employees: PropTypes.arrayOf(EMPLOYEE_PROPTYPES),\r\n});\r\n","import React from 'react';\r\nimport Icon from '../../../../shared/icon/icon.component';\r\nimport { EMPLOYEE_PROPTYPES, formatDateToString } from '../../../helpers.js';\r\nimport { ICONS_NAMES } from '../../../../../mock-data/mock.data';\r\nimport './table-row-body.styles.scss';\r\n\r\nconst TableRowBody = ({ data }) => {\r\n    const { name, date, job, agreement, locations } = data;\r\n\r\n    return (\r\n        <tr className=\"table-row-body\">\r\n            <td>{name}</td>\r\n            <td className=\"table-row-body__cell--high\">\r\n                {formatDateToString(date)}\r\n            </td>\r\n            <td className=\"table-row-body__cell--high\">{job}</td>\r\n            <td className=\"table-row-body__cell--high\">{agreement}</td>\r\n            <td className=\"table-row-body__cell--high\">\r\n                {locations.map((loc, index) =>\r\n                    index === locations.length - 1 ? loc : `${loc}, `\r\n                )}\r\n            </td>\r\n            <td className=\"table-row-body__cell--low\">\r\n                <Icon iconName={ICONS_NAMES.INFO} />\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nTableRowBody.propTypes = {\r\n    data: EMPLOYEE_PROPTYPES.isRequired,\r\n};\r\nexport default TableRowBody;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TableRowBody from '../table-row/table-row-body/table-row-body.component';\r\nimport { EMPLOYEE_PROPTYPES } from '../../helpers';\r\nimport './table-body.styles.scss';\r\n\r\nconst TableBody = ({ data, isValid }) => (\r\n    <tbody\r\n        className={`table-body ${!isValid ? 'table-body--empty' : undefined}`}\r\n    >\r\n        {isValid ? (\r\n            data.map((employee) => (\r\n                <TableRowBody data={employee} key={employee.id} />\r\n            ))\r\n        ) : (\r\n            <tr>\r\n                <td>Brak wyników spełniających wymagania</td>\r\n            </tr>\r\n        )}\r\n    </tbody>\r\n);\r\n\r\nTableBody.propTypes = {\r\n    data: PropTypes.arrayOf(EMPLOYEE_PROPTYPES),\r\n    isValid: PropTypes.bool.isRequired,\r\n};\r\n\r\nTableBody.defaultProps = {\r\n    data: [],\r\n};\r\n\r\nexport default TableBody;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './table-foot.styles.scss';\r\n\r\nconst TableFoot = ({ recordsNumber }) => (\r\n    <tfoot className=\"table-foot\">\r\n        <tr>\r\n            <td>Suma rekordów wynosi: {recordsNumber}</td>\r\n        </tr>\r\n    </tfoot>\r\n);\r\n\r\nTableFoot.propTypes = {\r\n    recordsNumber: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default TableFoot;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TableHead from './table-head/table-head.component';\r\nimport TableBody from './table-body/table-body.component';\r\nimport TableFoot from './table-foot/table-foot.component';\r\nimport { EMPLOYEES_HEADERS } from '../../../mock-data/mock.data';\r\nimport { EMPLOYEE_PROPTYPES } from '../helpers';\r\nimport './table.styles.scss';\r\n\r\nconst Table = ({ data }) => {\r\n    const dataLength = data.length;\r\n\r\n    return (\r\n        <table className=\"table-custom\">\r\n            <TableHead data={EMPLOYEES_HEADERS} />\r\n            <TableBody data={data} isValid={!!dataLength} />\r\n            <TableFoot recordsNumber={dataLength} />\r\n        </table>\r\n    );\r\n};\r\n\r\nTable.propTypes = {\r\n    data: PropTypes.arrayOf(EMPLOYEE_PROPTYPES),\r\n};\r\n\r\nTable.defaultProps = {\r\n    data: [],\r\n};\r\nexport default Table;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { EMPLOYEE_PROPTYPES } from '../../helpers.js';\r\nimport './checkbox.styles.scss';\r\n\r\nconst Checkbox = ({ element, isChecked }) => {\r\n    const elementName = typeof element === 'string' ? element : element.name;\r\n\r\n    const toggleCheckbox = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"checkbox\"\r\n            onClick={(event) => toggleCheckbox(event)}\r\n            role=\"button\"\r\n            tabIndex={0}\r\n        >\r\n            <label\r\n                htmlFor={elementName}\r\n                className={`checkbox__label ${\r\n                    isChecked ? 'checkbox__label--checked' : undefined\r\n                }`}\r\n            >\r\n                {elementName}\r\n                <input\r\n                    type=\"checkbox\"\r\n                    id={elementName}\r\n                    className=\"checkbox__input\"\r\n                />\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nCheckbox.propTypes = {\r\n    element: PropTypes.oneOfType([PropTypes.string, EMPLOYEE_PROPTYPES])\r\n        .isRequired,\r\n    isChecked: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Checkbox;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Checkbox from '../checkbox/checkbox.component';\r\nimport TextInput from '../text-input/text-input.component';\r\nimport { filterName, EMPLOYEE_PROPTYPES } from '../../helpers';\r\nimport './multiselect-dropdown.styles.scss';\r\n\r\nconst INITIAL_HEIGHT = 80;\r\nconst ELEMENT_HEIGHT = 40;\r\nconst MAX_EEMENT_NUM = 4;\r\nconst OFFSET = 1;\r\nconst MAX_LIST_HEIGHT = ELEMENT_HEIGHT * MAX_EEMENT_NUM + OFFSET;\r\n\r\nconst MultiselectDropdown = ({\r\n    selectOptions,\r\n    filtredRecords,\r\n    selectedOptions,\r\n    setSelectedOptions,\r\n    isEmployeesMultiselect,\r\n    areFiltersEmpty,\r\n}) => {\r\n    const options = isEmployeesMultiselect ? filtredRecords : selectOptions;\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [filtredOptions, setFiltredOptions] = useState(options);\r\n\r\n    const handeSearchChange = ({ target: { value } }) => {\r\n        setSearchValue(value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isEmployeesMultiselect && areFiltersEmpty) {\r\n            setFiltredOptions([]);\r\n        } else {\r\n            setFiltredOptions(filterName(searchValue, options));\r\n        }\r\n    }, [searchValue, areFiltersEmpty]);\r\n\r\n    const numberOfElements = options.length;\r\n    const listHeight = numberOfElements * ELEMENT_HEIGHT + OFFSET;\r\n    const listFixedHeight =\r\n        listHeight >= MAX_LIST_HEIGHT ? MAX_LIST_HEIGHT : listHeight;\r\n    const dropdownHeight = INITIAL_HEIGHT + listFixedHeight;\r\n\r\n    const filtredOptionsLength = filtredOptions.length;\r\n\r\n    const areOptionsEqual =\r\n        JSON.stringify(filtredOptions) === JSON.stringify(selectedOptions);\r\n\r\n    const handleAllOptionsSelect = () =>\r\n        areOptionsEqual\r\n            ? setSelectedOptions([])\r\n            : setSelectedOptions(filtredOptions);\r\n\r\n    const handleSingleOptionSelect = (el) => {\r\n        const index = selectedOptions.indexOf(el);\r\n\r\n        if (index > -1) {\r\n            const updatedOptions = [...selectedOptions];\r\n            updatedOptions.splice(index, 1);\r\n\r\n            setSelectedOptions(updatedOptions);\r\n        } else {\r\n            const updatedOptions = [...selectedOptions, el];\r\n\r\n            setSelectedOptions(updatedOptions);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"multiselect-dropdown\"\r\n            style={{ height: `${dropdownHeight}px` }}\r\n        >\r\n            <div className=\"multiselect-dropdown__element\">\r\n                <TextInput\r\n                    placeholder=\"Szukaj...\"\r\n                    isDropdown\r\n                    handeNameSearchChange={handeSearchChange}\r\n                />\r\n            </div>\r\n            <div\r\n                className=\"multiselect-dropdown__element\"\r\n                onClick={handleAllOptionsSelect}\r\n            >\r\n                <Checkbox\r\n                    element=\"Wszystkie\"\r\n                    isChecked={areOptionsEqual && !!filtredOptionsLength}\r\n                />\r\n            </div>\r\n\r\n            <ul\r\n                className={`multiselect-dropdown__list ${\r\n                    !filtredOptionsLength\r\n                        ? 'multiselect-dropdown__list--empty'\r\n                        : undefined\r\n                }`}\r\n                style={{ height: `${listFixedHeight}px` }}\r\n            >\r\n                {filtredOptionsLength\r\n                    ? filtredOptions.map((el) => {\r\n                          const elementName =\r\n                              typeof el === 'string' ? el : el.name;\r\n\r\n                          return (\r\n                              <li\r\n                                  key={elementName}\r\n                                  className=\"multiselect-dropdown__element\"\r\n                                  onClick={() => handleSingleOptionSelect(el)}\r\n                                  role=\"menuitem\"\r\n                              >\r\n                                  <Checkbox\r\n                                      element={el}\r\n                                      isChecked={selectedOptions.includes(el)}\r\n                                  />\r\n                              </li>\r\n                          );\r\n                      })\r\n                    : 'Brak elementów'}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nMultiselectDropdown.propTypes = {\r\n    selectOptions: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([PropTypes.string, EMPLOYEE_PROPTYPES])\r\n    ).isRequired,\r\n    filtredRecords: PropTypes.arrayOf(EMPLOYEE_PROPTYPES).isRequired,\r\n    selectedOptions: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([PropTypes.string, EMPLOYEE_PROPTYPES])\r\n    ).isRequired,\r\n    setSelectedOptions: PropTypes.func.isRequired,\r\n    isEmployeesMultiselect: PropTypes.bool.isRequired,\r\n    areFiltersEmpty: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default MultiselectDropdown;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MultiselectDropdown from '../../inputs/multiselect-dropdown/multiselect-dropdown.component';\r\nimport Icon from '../../../shared/icon/icon.component';\r\nimport { ICONS_NAMES } from '../../../../mock-data/mock.data';\r\nimport { EMPLOYEE_PROPTYPES, useWindowWidth } from '../../helpers';\r\nimport './modal-multiselect.styles.scss';\r\n\r\nconst MAX_WINDOW_WIDTH = 500;\r\n\r\nconst ModalMultiselect = ({\r\n    title,\r\n    options,\r\n    handleModalRuleChange,\r\n    isAnyModalOpen,\r\n    updateFilterValues,\r\n    filterKey,\r\n    areFiltersEmpty,\r\n    filtredRecords,\r\n}) => {\r\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n    const [selectedOptions, setSelectedOptions] = useState([]);\r\n    const windowWidth = useWindowWidth();\r\n    const isWindowWidthValid = windowWidth <= MAX_WINDOW_WIDTH;\r\n\r\n    useEffect(() => {\r\n        updateFilterValues(filterKey, selectedOptions);\r\n    }, [selectedOptions]);\r\n\r\n    const handleDropdownOpen = () => {\r\n        setIsDropdownOpen(true);\r\n        handleModalRuleChange(true);\r\n    };\r\n\r\n    const handleDropdownClose = () => {\r\n        if (isDropdownOpen) {\r\n            setIsDropdownOpen(false);\r\n            handleModalRuleChange(false);\r\n        }\r\n    };\r\n\r\n    const isEmployeesMultiselect = filterKey === 'employees';\r\n\r\n    const isSelectedOptionInFiltredRecords = selectedOptions.every((val) =>\r\n        filtredRecords.includes(val)\r\n    );\r\n\r\n    const validateEmployees = () => {\r\n        if (areFiltersEmpty || !isSelectedOptionInFiltredRecords) {\r\n            setSelectedOptions([]);\r\n            return 'Wybierz';\r\n        }\r\n    };\r\n\r\n    const getOptionName = (option) =>\r\n        typeof option === 'object' ? option.name : option;\r\n\r\n    const getInputValue = () => {\r\n        const selectedOptionsLength = selectedOptions.length;\r\n\r\n        if (selectedOptionsLength) {\r\n            if (isEmployeesMultiselect) {\r\n                validateEmployees();\r\n            }\r\n\r\n            const firstOption = getOptionName(selectedOptions[0]);\r\n            const validWidthMultipleOptions = `${firstOption}  +${\r\n                selectedOptionsLength - 1\r\n            }`;\r\n\r\n            switch (selectedOptionsLength) {\r\n                case 1:\r\n                    return `${firstOption}`;\r\n                case 2:\r\n                    return isWindowWidthValid\r\n                        ? validWidthMultipleOptions\r\n                        : `${firstOption}, ${getOptionName(\r\n                              selectedOptions[1]\r\n                          )}`;\r\n                default:\r\n                    return isWindowWidthValid\r\n                        ? validWidthMultipleOptions\r\n                        : `${firstOption}, ${getOptionName(\r\n                              selectedOptions[1]\r\n                          )} +${selectedOptionsLength - 2}`;\r\n            }\r\n        } else {\r\n            return 'Wybierz';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-multiselect\">\r\n            <div\r\n                className=\"modal-multiselect__texts-container\"\r\n                onClick={\r\n                    isAnyModalOpen ? handleDropdownClose : handleDropdownOpen\r\n                }\r\n            >\r\n                <span className=\"modal-multiselect__description\">{title}</span>\r\n                <div className=\"modal-multiselect__value-container\">\r\n                    <div className=\"modal-multiselect__value\">\r\n                        {getInputValue()}\r\n                    </div>\r\n                    <Icon\r\n                        iconName={ICONS_NAMES.SORT}\r\n                        customCSSClass={ICONS_NAMES.SORT}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {isDropdownOpen && (\r\n                <MultiselectDropdown\r\n                    selectOptions={options}\r\n                    filtredRecords={filtredRecords}\r\n                    selectedOptions={selectedOptions}\r\n                    setSelectedOptions={setSelectedOptions}\r\n                    isEmployeesMultiselect={isEmployeesMultiselect}\r\n                    areFiltersEmpty={areFiltersEmpty}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nModalMultiselect.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    options: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([PropTypes.string, EMPLOYEE_PROPTYPES])\r\n    ).isRequired,\r\n    handleModalRuleChange: PropTypes.func.isRequired,\r\n    isAnyModalOpen: PropTypes.bool.isRequired,\r\n    updateFilterValues: PropTypes.func.isRequired,\r\n    filterKey: PropTypes.string.isRequired,\r\n    areFiltersEmpty: PropTypes.bool.isRequired,\r\n    filtredRecords: PropTypes.arrayOf(EMPLOYEE_PROPTYPES).isRequired,\r\n};\r\n\r\nexport default ModalMultiselect;\r\n","export const enPlMonths = {\r\n    January: 'Styczeń',\r\n    February: 'Luty',\r\n    March: 'Marzec',\r\n    April: 'Kwiecień',\r\n    May: 'Maj',\r\n    June: 'Czerwiec',\r\n    July: 'Lipiec',\r\n    August: 'Sierpień',\r\n    September: 'Wrzesień',\r\n    October: 'Październik',\r\n    November: 'Listopad',\r\n    December: 'Grudzień',\r\n};\r\n\r\nexport const getColors = (isSelected, isSelectedStartOrEnd) => {\r\n    return ({ selectedFirstOrLastColor, normalColor, selectedColor }) => {\r\n        if (isSelectedStartOrEnd) {\r\n            return selectedFirstOrLastColor;\r\n        }\r\n        if (isSelected) {\r\n            return selectedColor;\r\n        }\r\n        return normalColor;\r\n    };\r\n};\r\n","import React from 'react';\r\n\r\nexport const datepickerContextDefaultValue = {\r\n    focusedDate: null,\r\n    isDateFocused: () => false,\r\n    isDateSelected: () => false,\r\n    isDateHovered: () => false,\r\n    isDateBlocked: () => false,\r\n    isFirstOrLastSelectedDate: () => false,\r\n    onDateFocus: () => {},\r\n    onDateHover: () => {},\r\n    onDateSelect: () => {},\r\n};\r\n\r\nexport default React.createContext(datepickerContextDefaultValue);\r\n","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDay } from '@datepicker-react/hooks';\r\nimport DatepickerContext from '../date-picker.context';\r\nimport { getColors } from '../helpers';\r\nimport './date-picker-day.styles.scss';\r\n\r\nconst COLORS = {\r\n    WHITE: '#ffffff',\r\n    BLACK: '#000000',\r\n    GREY: '#fbfbfb',\r\n    PRIMARY_ORANGE: '#ff6b01',\r\n    SECONDARY_ORANGE: '#ffac71',\r\n};\r\n\r\nconst PickerDay = ({ dayLabel, date }) => {\r\n    const contextValues = useContext(DatepickerContext);\r\n    const { isSelected, isSelectedStartOrEnd, onClick } = useDay({\r\n        date,\r\n        ...contextValues,\r\n    });\r\n\r\n    const getTrueColor = getColors(isSelected, isSelectedStartOrEnd);\r\n\r\n    return (\r\n        <>\r\n            {dayLabel ? (\r\n                <button\r\n                    onClick={onClick}\r\n                    type=\"button\"\r\n                    className=\"day-button\"\r\n                    style={{\r\n                        color: getTrueColor({\r\n                            selectedFirstOrLastColor: COLORS.WHITE,\r\n                            normalColor: COLORS.BLACK,\r\n                            selectedColor: COLORS.WHITE,\r\n                        }),\r\n                        background: getTrueColor({\r\n                            selectedFirstOrLastColor: COLORS.PRIMARY_ORANGE,\r\n                            normalColor: COLORS.WHITE,\r\n                            selectedColor: COLORS.SECONDARY_ORANGE,\r\n                        }),\r\n                    }}\r\n                >\r\n                    {dayLabel}\r\n                </button>\r\n            ) : (\r\n                <div />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nPickerDay.propTypes = {\r\n    dayLabel: PropTypes.string,\r\n    date: PropTypes.instanceOf(Date).isRequired,\r\n};\r\n\r\nPickerDay.defaultProps = {\r\n    dayLabel: '',\r\n};\r\n\r\nexport default PickerDay;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useMonth } from '@datepicker-react/hooks';\r\nimport { enPlMonths } from '../helpers';\r\nimport PickerDay from '../date-picker-day/date-picker-day.component';\r\nimport './date-picker-month.styles.scss';\r\n\r\nconst WEEK_DAYS_LABELS = ['Pon', 'Wto', 'Śro', 'Czw', 'Pią', 'Sob', 'Nie'];\r\n\r\nconst PickerMonth = ({ year, month, firstDayOfWeek }) => {\r\n    const { days, monthLabel } = useMonth({\r\n        year,\r\n        month,\r\n        firstDayOfWeek,\r\n    });\r\n\r\n    const convertMonthLabelToPl = (label = monthLabel) => {\r\n        const splitedDate = label.split(' ');\r\n        const convertedMonth = enPlMonths[splitedDate[0]];\r\n\r\n        return `${convertedMonth} ${splitedDate[1]}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"month\">\r\n            <div className=\"month__month-label\">\r\n                <strong>{convertMonthLabelToPl()}</strong>\r\n            </div>\r\n            <div className=\"month__day-container\">\r\n                {WEEK_DAYS_LABELS.map((dayLabel) => (\r\n                    <div className=\"month__day-label\" key={dayLabel}>\r\n                        {dayLabel}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"month__day-space\">\r\n                {days.map((day, index) =>\r\n                    day ? (\r\n                        <PickerDay\r\n                            date={day.date}\r\n                            key={day.date.toString()}\r\n                            dayLabel={day.dayLabel}\r\n                        />\r\n                    ) : (\r\n                        <div key={index} />\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nPickerMonth.propTypes = {\r\n    year: PropTypes.number.isRequired,\r\n    month: PropTypes.number.isRequired,\r\n    firstDayOfWeek: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default PickerMonth;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from '../../../../shared/icon/icon.component';\r\nimport './date-picker-nav.styles.scss';\r\n\r\nconst PickerNavButton = ({ iconName, onClick }) => (\r\n    <button className=\"nav-button\" type=\"button\" onClick={onClick}>\r\n        <Icon iconName={iconName} customCSSClass={iconName} />\r\n    </button>\r\n);\r\n\r\nPickerNavButton.propTypes = {\r\n    iconName: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func,\r\n};\r\n\r\nPickerNavButton.defaultProps = {\r\n    onClick: () => {},\r\n};\r\n\r\nexport default PickerNavButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './date-picker-handler.styles.scss';\r\n\r\nconst PickerHandler = ({ text, clickFunction }) => (\r\n    <div\r\n        onClick={clickFunction}\r\n        role=\"button\"\r\n        tabIndex={0}\r\n        className=\"date-picker-control \"\r\n    >\r\n        {text}\r\n    </div>\r\n);\r\n\r\nPickerHandler.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    clickFunction: PropTypes.func,\r\n};\r\n\r\nPickerHandler.defaultProps = {\r\n    clickFunction: () => {},\r\n};\r\n\r\nexport default PickerHandler;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDatepicker } from '@datepicker-react/hooks';\r\nimport PickerMonth from './date-picker-month/date-picker-month.component';\r\nimport PickerNavButton from './date-picker-nav/date-picker-nav.component';\r\nimport PickerHandler from './date-picker-handler/date-picker-handler.component';\r\nimport { ICONS_NAMES } from '../../../../mock-data/mock.data';\r\nimport DatepickerContext from './date-picker.context';\r\nimport './date-picker.styles.scss';\r\n\r\nconst MIN_MONTH = 0;\r\nconst MAX_MONTH = 11;\r\n\r\nconst DatePicker = ({\r\n    pickerState: { startDate, endDate, focusedInput },\r\n    handleDateChange,\r\n    closeDropdown,\r\n    clearDatePicker,\r\n}) => {\r\n    const {\r\n        firstDayOfWeek,\r\n        activeMonths,\r\n        isDateSelected,\r\n        isDateHovered,\r\n        isFirstOrLastSelectedDate,\r\n        isDateBlocked,\r\n        isDateFocused,\r\n        focusedDate,\r\n        onDateHover,\r\n        onDateSelect,\r\n        onDateFocus,\r\n        goToPreviousMonthsByOneMonth,\r\n        goToNextMonthsByOneMonth,\r\n    } = useDatepicker({\r\n        startDate,\r\n        endDate,\r\n        focusedInput,\r\n        onDatesChange: handleDateChange,\r\n    });\r\n\r\n    const currentMonth = activeMonths[0].month;\r\n    const currentYear = activeMonths[0].year;\r\n\r\n    const validateNavigation = (month, fnc) =>\r\n        currentMonth === month ? null : fnc;\r\n\r\n    return (\r\n        <DatepickerContext.Provider\r\n            value={{\r\n                focusedDate,\r\n                isDateFocused,\r\n                isDateSelected,\r\n                isDateHovered,\r\n                isDateBlocked,\r\n                isFirstOrLastSelectedDate,\r\n                onDateSelect,\r\n                onDateFocus,\r\n                onDateHover,\r\n            }}\r\n        >\r\n            <div className=\"date-picker\">\r\n                <div className=\"date-picker__controls-container\">\r\n                    <PickerHandler\r\n                        text=\"Wyczyść\"\r\n                        clickFunction={clearDatePicker}\r\n                    />\r\n                    <PickerHandler\r\n                        text=\"Zamknij\"\r\n                        clickFunction={closeDropdown}\r\n                    />\r\n                </div>\r\n\r\n                <PickerMonth\r\n                    year={currentYear}\r\n                    month={currentMonth}\r\n                    firstDayOfWeek={firstDayOfWeek}\r\n                />\r\n                <div className=\"date-picker__butons-container\">\r\n                    <PickerNavButton\r\n                        iconName={ICONS_NAMES.PREVIOUS}\r\n                        onClick={validateNavigation(\r\n                            MIN_MONTH,\r\n                            goToPreviousMonthsByOneMonth\r\n                        )}\r\n                    />\r\n                    <PickerNavButton\r\n                        iconName={ICONS_NAMES.NEXT}\r\n                        onClick={validateNavigation(\r\n                            MAX_MONTH,\r\n                            goToNextMonthsByOneMonth\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </DatepickerContext.Provider>\r\n    );\r\n};\r\n\r\nDatePicker.propTypes = {\r\n    pickerState: PropTypes.shape({\r\n        startDate: PropTypes.instanceOf(Date),\r\n        endDate: PropTypes.instanceOf(Date),\r\n        focusedInput: PropTypes.string,\r\n    }).isRequired,\r\n    handleDateChange: PropTypes.func.isRequired,\r\n    closeDropdown: PropTypes.func,\r\n    clearDatePicker: PropTypes.func.isRequired,\r\n};\r\n\r\nDatePicker.defaultProps = {\r\n    closeDropdown: () => {},\r\n};\r\n\r\nexport default DatePicker;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { START_DATE } from '@datepicker-react/hooks';\r\nimport PropTypes from 'prop-types';\r\nimport DatePicker from '../../inputs/date-picker/date-picker.component';\r\nimport Icon from '../../../shared/icon/icon.component';\r\nimport { ICONS_NAMES } from '../../../../mock-data/mock.data';\r\nimport './modal-date.styles.scss';\r\n\r\nconst INITIAL_PICKER_STATE = {\r\n    startDate: null,\r\n    endDate: null,\r\n    focusedInput: START_DATE,\r\n};\r\n\r\nconst ModalDate = ({\r\n    handleModalRuleChange,\r\n    isAnyModalOpen,\r\n    updateFilterValues,\r\n}) => {\r\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n    const [pickerState, setPickerState] = useState(INITIAL_PICKER_STATE);\r\n\r\n    // dropdown handlers\r\n\r\n    const handleDropdownOpen = () => {\r\n        setIsDropdownOpen(true);\r\n        handleModalRuleChange(true);\r\n    };\r\n\r\n    const handleDropdownClose = () => {\r\n        if (isDropdownOpen) {\r\n            setIsDropdownOpen(false);\r\n            handleModalRuleChange(false);\r\n        }\r\n    };\r\n\r\n    // date picker handlers\r\n\r\n    const handleDateChange = (data) => {\r\n        if (!data.focusedInput) {\r\n            setPickerState({ ...data, focusedInput: START_DATE });\r\n        } else {\r\n            setPickerState(data);\r\n        }\r\n    };\r\n\r\n    const clearDatePicker = () => {\r\n        setPickerState(INITIAL_PICKER_STATE);\r\n    };\r\n\r\n    const { startDate, endDate } = pickerState;\r\n\r\n    useEffect(() => {\r\n        updateFilterValues('date', { startDate, endDate });\r\n    }, [pickerState]);\r\n\r\n    // display handlers\r\n\r\n    const formatDateToDMString = (date) => {\r\n        if (date instanceof Date) {\r\n            const day = date.getDate();\r\n            const month = date.getMonth() + 1;\r\n\r\n            return `${day}.${month < 10 ? `0${month}` : month}`;\r\n        }\r\n        return '';\r\n    };\r\n\r\n    const inputValue = startDate\r\n        ? `${formatDateToDMString(startDate)} - ${formatDateToDMString(\r\n              endDate\r\n          )}`\r\n        : 'Wybierz';\r\n\r\n    const canDropdownBeClosed =\r\n        (isAnyModalOpen && endDate) ||\r\n        (isAnyModalOpen && !startDate && !endDate);\r\n\r\n    return (\r\n        <div className=\"modal-date\">\r\n            <div\r\n                className=\"modal-date__texts-container\"\r\n                onClick={\r\n                    canDropdownBeClosed\r\n                        ? handleDropdownClose\r\n                        : handleDropdownOpen\r\n                }\r\n            >\r\n                <Icon\r\n                    iconName={ICONS_NAMES.CALENDAR}\r\n                    customCSSClass={ICONS_NAMES.CALENDAR}\r\n                />\r\n\r\n                <div className=\"modal-date__value-container\">\r\n                    <span className=\"modal-date__description\">Okres</span>\r\n                    <div className=\"modal-date__value\">{inputValue}</div>\r\n                </div>\r\n            </div>\r\n\r\n            {isDropdownOpen && (\r\n                <DatePicker\r\n                    pickerState={pickerState}\r\n                    handleDateChange={handleDateChange}\r\n                    clearDatePicker={clearDatePicker}\r\n                    closeDropdown={\r\n                        canDropdownBeClosed ? handleDropdownClose : null\r\n                    }\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nModalDate.propTypes = {\r\n    handleModalRuleChange: PropTypes.func.isRequired,\r\n    isAnyModalOpen: PropTypes.bool.isRequired,\r\n    updateFilterValues: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ModalDate;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './secondary-button.styles.scss';\r\n\r\nconst SecondaryButton = ({ text, buttonFunction, isDisabled }) => {\r\n    return (\r\n        <button\r\n            onClick={buttonFunction}\r\n            type=\"button\"\r\n            className=\"secondary-button\"\r\n            disabled={isDisabled}\r\n        >\r\n            {text}\r\n        </button>\r\n    );\r\n};\r\n\r\nSecondaryButton.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    buttonFunction: PropTypes.func,\r\n    isDisabled: PropTypes.bool,\r\n};\r\n\r\nSecondaryButton.defaultProps = {\r\n    buttonFunction: () => {},\r\n    isDisabled: false,\r\n};\r\n\r\nSecondaryButton.defaultProps = {};\r\n\r\nexport default SecondaryButton;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ModalMultiselect from './modal-multiselect/modal-multiselect.component';\r\nimport ModalDate from './modal-date/modal-date.component';\r\nimport SecondaryButton from '../../shared/buttons/secondary-button/secondary-button.component';\r\nimport { MULTISELECTABLE_OPTIONS } from '../../../mock-data/mock.data';\r\nimport { EMPLOYEE_PROPTYPES } from '../helpers';\r\nimport './modal.styles.scss';\r\n\r\nconst Modal = ({\r\n    updateFilterValues,\r\n    handleTableDisplay,\r\n    filtredRecords,\r\n    isEmployeeSelected,\r\n    areFiltersEmpty,\r\n    modalCloseFunction,\r\n}) => {\r\n    const [isAnyModalOpen, setIsAnyModalOpen] = useState(false);\r\n\r\n    const handleModalRuleChange = (rule) => {\r\n        setIsAnyModalOpen(rule);\r\n    };\r\n    return (\r\n        <div className=\"modal\">\r\n            <button\r\n                onClick={modalCloseFunction}\r\n                className=\"modal__close-button\"\r\n                type=\"button\"\r\n            >\r\n                x\r\n            </button>\r\n            <h2 className=\"modal__heading\">Wybierz pracowników</h2>\r\n\r\n            <div className=\"modal__select-container\">\r\n                <ModalDate\r\n                    handleModalRuleChange={handleModalRuleChange}\r\n                    isAnyModalOpen={isAnyModalOpen}\r\n                    updateFilterValues={updateFilterValues}\r\n                />\r\n\r\n                {MULTISELECTABLE_OPTIONS.map(\r\n                    ({ title, options, filterKey }) => (\r\n                        <ModalMultiselect\r\n                            title={title}\r\n                            options={options}\r\n                            handleModalRuleChange={handleModalRuleChange}\r\n                            isAnyModalOpen={isAnyModalOpen}\r\n                            updateFilterValues={updateFilterValues}\r\n                            filterKey={filterKey}\r\n                            areFiltersEmpty={areFiltersEmpty}\r\n                            filtredRecords={filtredRecords}\r\n                            key={filterKey}\r\n                        />\r\n                    )\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"modal__button-container\">\r\n                <SecondaryButton\r\n                    text=\"WYŚWIETL\"\r\n                    buttonFunction={handleTableDisplay}\r\n                    isDisabled={!isEmployeeSelected}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nModal.propTypes = {\r\n    updateFilterValues: PropTypes.func.isRequired,\r\n    handleTableDisplay: PropTypes.func.isRequired,\r\n    filtredRecords: PropTypes.arrayOf(EMPLOYEE_PROPTYPES).isRequired,\r\n    isEmployeeSelected: PropTypes.bool.isRequired,\r\n    areFiltersEmpty: PropTypes.bool.isRequired,\r\n    modalCloseFunction: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport { formatDateToString, SEARCH_FILTERS_PROPTYPES } from '../helpers';\r\nimport './filters-info.styles.scss';\r\n\r\nconst FiltersInfo = ({ searchFilters }) => {\r\n    const {\r\n        date: { startDate, endDate },\r\n        jobs,\r\n        locations,\r\n        agreements,\r\n    } = searchFilters;\r\n\r\n    const formatArrayToString = (arr) => {\r\n        if (arr.length) {\r\n            return arr.map((el, index) =>\r\n                index === arr.length - 1 ? el : ` ${el}, `\r\n            );\r\n        }\r\n        return '-';\r\n    };\r\n\r\n    return (\r\n        <div className=\"filters-info\">\r\n            <p className=\"filters-info__title\">Użyto następujących filtrów:</p>\r\n            <p>\r\n                <strong>Data początkowa</strong>:{' '}\r\n                {formatDateToString(startDate)}\r\n            </p>\r\n            <p>\r\n                <strong>Data końcowa</strong>: {formatDateToString(endDate)}\r\n            </p>\r\n            <p>\r\n                <strong>Stanowiska:</strong> {formatArrayToString(jobs)}\r\n            </p>\r\n            <p>\r\n                <strong>Lokalizacje:</strong> {formatArrayToString(locations)}\r\n            </p>\r\n            <p>\r\n                <strong>Typ zatrudnienia</strong>:{' '}\r\n                {formatArrayToString(agreements)}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nFiltersInfo.propTypes = {\r\n    searchFilters: SEARCH_FILTERS_PROPTYPES.isRequired,\r\n};\r\n\r\nexport default FiltersInfo;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PrimaryButton from '../shared/buttons/primary-button/primary-button.component';\r\nimport TextInput from './inputs/text-input/text-input.component';\r\nimport Table from './table/table.component';\r\nimport Modal from './modal/modal.component';\r\nimport Backdrop from '../shared/backdrop/backdrop.component';\r\nimport FiltersInfo from './filters-info/filters-info.component';\r\nimport {\r\n    EMPLOYEES,\r\n    INITIAL_FILTERS,\r\n    JOB_FILTERS,\r\n} from '../../mock-data/mock.data';\r\nimport { filterName, filterThroughFilters } from './helpers';\r\nimport './main.styles.scss';\r\n\r\nconst Main = () => {\r\n    const [isFiltersModalOpen, setIsFiltersModalOpen] = useState(false);\r\n    const [isTableVisible, setIsTableVisible] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [nameSearchValue, setNameSearchValue] = useState('');\r\n    const [searchFilters, setSearchFilters] = useState(INITIAL_FILTERS);\r\n    const [filtredRecords, setFiltredRecords] = useState([]);\r\n    const [tableData, setTableData] = useState([]);\r\n\r\n    // component handlers\r\n\r\n    // component handlers - modal\r\n    const openFiltersModal = () => {\r\n        setIsFiltersModalOpen(true);\r\n    };\r\n\r\n    const closeFiltersModal = () => {\r\n        setIsFiltersModalOpen(false);\r\n    };\r\n\r\n    // component handlers - table\r\n    const displayTable = () => {\r\n        setIsLoading(true);\r\n\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n            setIsTableVisible(true);\r\n        }, 1000);\r\n    };\r\n\r\n    const hideTable = () => {\r\n        setIsTableVisible(false);\r\n    };\r\n\r\n    // modal handlers\r\n\r\n    const startFilters = () => {\r\n        setNameSearchValue('');\r\n        openFiltersModal();\r\n    };\r\n\r\n    const handleTableDisplay = () => {\r\n        setTableData(searchFilters.employees);\r\n        closeFiltersModal();\r\n        displayTable();\r\n    };\r\n\r\n    // name search handlers\r\n\r\n    const handeNameSearchChange = ({ target: { value } }) => {\r\n        setNameSearchValue(value);\r\n    };\r\n\r\n    const handleNameSearchKeyPress = ({ key }) => {\r\n        if (key === 'Enter') {\r\n            displayTable();\r\n        }\r\n    };\r\n\r\n    // filters change handlers\r\n\r\n    const updateFilterValues = (filterKey, value) => {\r\n        setSearchFilters({ ...searchFilters, [filterKey]: value });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTableData(filterName(nameSearchValue, EMPLOYEES));\r\n    }, [nameSearchValue]);\r\n\r\n    useEffect(() => {\r\n        setFiltredRecords(filterThroughFilters(searchFilters, EMPLOYEES));\r\n    }, [searchFilters]);\r\n\r\n    const { employees, ...basicFilters } = searchFilters;\r\n\r\n    const areFiltersEmpty =\r\n        JSON.stringify(basicFilters) === JSON.stringify(JOB_FILTERS);\r\n\r\n    // reset handler\r\n\r\n    const resetToInitialState = () => {\r\n        hideTable();\r\n        setNameSearchValue('');\r\n        setSearchFilters(INITIAL_FILTERS);\r\n        setFiltredRecords([]);\r\n        setTableData(EMPLOYEES);\r\n    };\r\n\r\n    return (\r\n        <article className=\"main\">\r\n            {isTableVisible ? (\r\n                <section className=\"main__section-table\">\r\n                    <Table data={tableData} />\r\n                    <div className=\"main__filters-info-container\">\r\n                        <FiltersInfo searchFilters={searchFilters} />\r\n                        <PrimaryButton\r\n                            text=\"PONÓW\"\r\n                            buttonFunction={resetToInitialState}\r\n                        />\r\n                    </div>\r\n                </section>\r\n            ) : (\r\n                <section className=\"main__section-search\">\r\n                    <div className=\"main__input-container\">\r\n                        <TextInput\r\n                            placeholder=\"Wyszukaj po imieniu i nazwisku...\"\r\n                            handeNameSearchChange={handeNameSearchChange}\r\n                            handleKeyPress={handleNameSearchKeyPress}\r\n                        />\r\n                    </div>\r\n                    <div className=\"main__buttons-container\">\r\n                        <PrimaryButton\r\n                            text=\"SZUKAJ\"\r\n                            buttonFunction={displayTable}\r\n                        />\r\n                        <PrimaryButton\r\n                            text=\"FILTRUJ\"\r\n                            buttonFunction={startFilters}\r\n                        />\r\n                    </div>\r\n                </section>\r\n            )}\r\n\r\n            {isFiltersModalOpen && (\r\n                <section>\r\n                    <Modal\r\n                        updateFilterValues={updateFilterValues}\r\n                        handleTableDisplay={handleTableDisplay}\r\n                        filtredRecords={filtredRecords}\r\n                        isEmployeeSelected={!!searchFilters.employees.length}\r\n                        areFiltersEmpty={areFiltersEmpty}\r\n                        modalCloseFunction={closeFiltersModal}\r\n                    />\r\n                    <Backdrop />\r\n                </section>\r\n            )}\r\n\r\n            {isLoading && <Backdrop>Loading...</Backdrop>}\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Navigation from './components/navigation/navigation.component';\nimport Main from './components/main/main.component';\nimport './App.scss';\n\nconst App = () => {\n    return (\n        <div className=\"app\">\n            <Navigation />\n            <Main />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}